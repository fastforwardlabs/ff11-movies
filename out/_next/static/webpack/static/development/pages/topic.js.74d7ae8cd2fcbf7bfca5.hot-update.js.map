{"version":3,"file":"static/webpack/static/development/pages/topic.js.74d7ae8cd2fcbf7bfca5.hot-update.js","sources":["webpack:///./pages/topic.js"],"sourcesContent":["import { withRouter } from 'next/router'\nimport { info } from '../data/sample_movie_info.js'\nimport { names } from '../data/first_names.js'\nimport * as chroma from 'chroma-js'\nimport * as _ from 'lodash'\nimport { nouns, adjectives } from '../data/corpora.js'\n\nlet class_labels = ['negative', 'positive']\nlet red = chroma('red').luminance(0.35)\nlet blue = chroma('blue').luminance(0.35)\nlet scaleRed = chroma.scale(['white', red]).mode('lch')\nlet scaleBlue = chroma.scale(['white', blue]).mode('lch')\n\nconst Page = withRouter(\n  ({ font_size, line_height, grem, router, analyze, data }) => {\n    let info_ids = info.map(o => o.og_id)\n    let topic_info = info[info_ids.indexOf(router.query.id)]\n\n    let reviews = data.filter(o => o.url === router.query.id)\n\n    let counts = reviews.reduce(\n      (counts, r) => {\n        let slice = counts.slice()\n        if (r.class_probabilities[1] > r.class_probabilities[0]) {\n          slice[1] += 1\n        } else {\n          slice[0] += 1\n        }\n        return slice\n      },\n      [0, 0]\n    )\n\n    let winner_count_index = 0\n    if (counts[1] > counts[0]) winner_count_index = 1\n    let winner_names = ['negative', 'positive']\n    let winner_name = winner_names[winner_count_index]\n\n    return (\n      <div style={{ paddingTop: grem, paddingBottom: grem * 3 }}>\n        <div\n          style={{\n            maxWidth: 840,\n            border: 'solid 1px black',\n            borderBottom: 'none',\n            margin: `0 auto`,\n          }}\n        >\n          <div\n            style={{\n              padding: grem / 2,\n              borderBottom: 'solid 1px black',\n            }}\n          >\n            <div\n              style={{\n                fontSize: font_size * 2,\n                lineHeight: 1.25,\n                marginBottom: grem / 2,\n              }}\n            >\n              {topic_info.Title}\n            </div>\n            <div>{topic_info.Plot}</div>\n          </div>\n\n          {analyze ? (\n            <div\n              style={{\n                padding: grem / 2,\n                position: 'relative',\n                borderBottom: 'solid 1px black',\n              }}\n            >\n              <div\n                style={{\n                  position: 'absolute',\n                  left: 0,\n                  top: 0,\n                  bottom: 0,\n                  width: `${(counts[1] / reviews.length) * 100}%`,\n                  background: scaleBlue(1),\n                }}\n              />\n              <div\n                style={{\n                  position: 'absolute',\n                  right: 0,\n                  top: 0,\n                  bottom: 0,\n                  width: `${(counts[0] / reviews.length) * 100}%`,\n                  background: scaleRed(1),\n                }}\n              />\n\n              <div style={{ position: 'relative' }}>\n                {Math.round(\n                  (counts[winner_count_index] / reviews.length) * 1000\n                ) / 10}\n                % {winner_name} reviews\n              </div>\n            </div>\n          ) : null}\n          <div>\n            {reviews.map(r => {\n              let winner_name = r.class\n              let winner_index, scaleWinner, scaleLoser\n              if (r.class_probabilities[1] > r.class_probabilities[0]) {\n                winner_index = 1\n                scaleWinner = scaleBlue\n                scaleLoser = scaleRed\n              } else {\n                winner_index = 0\n                scaleWinner = scaleRed\n                scaleLoser = scaleBlue\n              }\n\n              let max = Math.max(\n                Math.abs(_.min(r.lime_scores)),\n                Math.abs(_.max(r.lime_scores))\n              )\n\n              function scaleScore(value) {\n                if (value < 0) {\n                  return scaleRed(Math.abs(value) / max)\n                } else {\n                  return scaleBlue(Math.abs(value) / max)\n                }\n              }\n\n              return (\n                <div\n                  style={{\n                    borderBottom: 'solid 1px black',\n                    display: 'grid',\n                    gridTemplateColumns: `180px 1fr`,\n                  }}\n                >\n                  <div\n                    style={{\n                      padding: grem / 2,\n                    }}\n                  >\n                    <img\n                      src={`/static/images/cifar_${Math.floor(\n                        Math.random() * 130\n                      )}.png`}\n                      style={{\n                        width: grem * 2,\n                        height: grem * 2,\n                        filter: `grayscale(100%) contrast(2) brightness(2)`,\n                        imageRendering: 'pixelated',\n                      }}\n                    />\n                    <div\n                      style={{\n                        fontSize: font_size * 0.875,\n                        lineHeight: 1.5,\n                        wordBreak: 'break-word',\n                      }}\n                    >\n                      {_.sample(adjectives)\n                        .toLowerCase()\n                        .replace('-', '') +\n                        _.sample(nouns)\n                          .toLowerCase()\n                          .replace('-', '')}\n                    </div>\n                  </div>\n                  <div\n                    style={{\n                      borderLeft: 'solid 1px black',\n                    }}\n                  >\n                    {analyze ? (\n                      <div\n                        style={{\n                          padding: `${grem / 4}px ${grem / 2}px`,\n                          background: scaleWinner(\n                            r.class_probabilities[winner_index]\n                          ),\n                        }}\n                      >\n                        classification: {class_labels[winner_index]} (\n                        {Math.round(r.class_probabilities[winner_index] * 100)}\n                        %)\n                      </div>\n                    ) : null}\n                    <div\n                      style={{\n                        padding: grem,\n                      }}\n                    >\n                      {r.lime_tokens.map((t, i) => {\n                        let score = r.lime_scores[i]\n                        return (\n                          <span>\n                            {' '}\n                            <span\n                              style={{\n                                background: analyze\n                                  ? scaleScore(score)\n                                  : 'transparent',\n                              }}\n                            >\n                              {t}\n                            </span>\n                          </span>\n                        )\n                      })}\n                    </div>\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\n\nexport default Page\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AADA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AADA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AADA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AADA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAKA;AAKA;AAGA;;;;A","sourceRoot":""}