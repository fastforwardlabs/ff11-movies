{"version":3,"file":"static/webpack/static/development/pages/_app.js.5226f19b405c2700705a.hot-update.js","sources":["webpack:///./parts/Bar.js"],"sourcesContent":["import React from 'react'\nimport Link from 'next/Link'\nimport * as chroma from 'chroma-js'\nimport { scaleRed, scaleBlue, Border } from './Static'\nimport { p } from './Utils'\n\nclass Bar extends React.Component {\n  render() {\n    let {\n      data,\n      nbsvm_data,\n      grem,\n      analyze,\n      setAnalyze,\n      total,\n      setAlgo,\n      show_accuracy,\n      setAccuracy,\n      compare,\n      setCompare,\n      is_front = false,\n      hl_options,\n      analyze_locked = false,\n    } = this.props\n\n    let certainty_array = data.map(r => {\n      if (r.logits[1] > r.logits[0]) {\n        return {\n          class: r.class,\n          label: r.label,\n          certainty: r.class_probabilities[1],\n        }\n      } else {\n        return {\n          class: r.class,\n          label: r.label,\n          certainty: r.class_probabilities[0],\n        }\n      }\n    })\n    let pos = _.sortBy(\n      certainty_array.filter(r => r.class === 'pos'),\n      'certainty'\n    ).reverse()\n    let neg = _.sortBy(\n      certainty_array.filter(r => r.class === 'neg'),\n      'certainty'\n    )\n    let combined = [...pos, ...neg]\n\n    let rightwrong = data.reduce(\n      (counts, r) => {\n        let slice = counts.slice()\n        if (r.label === r.class) {\n          slice[1] += 1\n        } else {\n          slice[0] += 1\n        }\n        return slice\n      },\n      [0, 0]\n    )\n    let accuracy = rightwrong[1] / data.length\n\n    let ncertainty_array = nbsvm_data.map(r => {\n      if (r.logits[1] > r.logits[0]) {\n        return {\n          class: r.class,\n          label: r.label,\n          certainty: r.class_probabilities[1],\n        }\n      } else {\n        return {\n          class: r.class,\n          label: r.label,\n          certainty: r.class_probabilities[0],\n        }\n      }\n    })\n    let npos = _.sortBy(\n      ncertainty_array.filter(r => r.class === 'pos'),\n      'certainty'\n    ).reverse()\n    let nneg = _.sortBy(\n      ncertainty_array.filter(r => r.class === 'neg'),\n      'certainty'\n    )\n    let ncombined = [...npos, ...nneg]\n\n    let nrightwrong = nbsvm_data.reduce(\n      (counts, r) => {\n        let slice = counts.slice()\n        if (r.label === r.class) {\n          slice[1] += 1\n        } else {\n          slice[0] += 1\n        }\n        return slice\n      },\n      [0, 0]\n    )\n    let naccuracy = nrightwrong[1] / data.length\n\n    let counts = [\n      combined.filter(r => r.class === 'neg').length,\n      combined.filter(r => r.class === 'pos').length,\n    ]\n    let ncounts = [\n      ncombined.filter(r => r.class === 'neg').length,\n      ncombined.filter(r => r.class === 'pos').length,\n    ]\n\n    return (\n      <div\n        style={{\n          background: 'white',\n          transition: 'background 0.1s linear',\n          position: 'sticky',\n          zIndex: 999,\n          top: 0,\n        }}\n      >\n        <div>\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'top',\n              flexWrap: 'wrap',\n              padding: p(grem / 4, grem / 4),\n            }}\n          >\n            {!is_front ? (\n              <Link href=\"/\">\n                <a\n                  className=\"hover-block-container no-opacity-hover\"\n                  style={{\n                    display: 'block',\n                    padding: p(grem / 4 + grem * 0.125, grem / 2),\n                    marginLeft: -grem / 4,\n                    marginTop: -grem / 4,\n                    borderRight: 'solid 1px black',\n                    borderBottom: 'solid 1px black',\n                    marginBottom: -1,\n                    position: 'relative',\n                    textDecoration: 'none',\n                  }}\n                >\n                  <div\n                    style={{\n                      width: grem * 0.75,\n                      height: grem * 0.75,\n                      border: 'solid 1px black',\n                      position: 'relative',\n                    }}\n                  >\n                    <div\n                      style={{\n                        position: 'absolute',\n                        left: 0,\n                        top: 0,\n                        width: (grem * 0.75) / 2 - 1,\n                        height: grem * 0.75 - 2,\n                        borderRight: 'solid 1px black',\n                      }}\n                    />\n                    <div\n                      style={{\n                        position: 'absolute',\n                        left: 0,\n                        top: 0,\n                        height: (grem * 0.75) / 2 - 1,\n                        width: grem * 0.75 - 2,\n                        borderBottom: 'solid 1px black',\n                      }}\n                    />\n                  </div>\n                  <div className=\"hover-block\" />\n                </a>\n              </Link>\n            ) : null}\n            <button\n              onClick={() => {\n                if (!analyze_locked) setAnalyze(!analyze)\n              }}\n              style={{\n                display: 'flex',\n                padding: p(grem / 4, grem / 4),\n                opacity: analyze_locked ? 1 : null,\n                cursor: analyze_locked ? 'default' : 'pointer',\n              }}\n            >\n              <div\n                style={{\n                  width: grem * 0.5,\n                  height: grem * 0.5,\n                  border: 'solid 1px black',\n                  marginTop: grem * (6 / 8),\n                  marginRight: grem * (2 / 8),\n                  background: analyze ? 'black' : 'white',\n                }}\n              />\n              <div\n                style={{\n                  textDecoration: analyze_locked ? 'none' : 'underline',\n                }}\n              >\n                Analyze\n              </div>\n            </button>\n            {analyze ? (\n              <>\n                <div\n                  style={{\n                    paddingTop: grem / 2,\n                    paddingBottom: grem / 2,\n                    display: 'none',\n                  }}\n                >\n                  &ndash;\n                </div>\n\n                <div style={{ display: 'flex' }}>\n                  <div\n                    style={{\n                      paddingTop: grem / 2,\n                      paddingBottom: grem / 2,\n                      paddingLeft: (grem / 2) * 0,\n                      paddingRight: grem / 8,\n                    }}\n                  >\n                    show:\n                  </div>\n                  <button\n                    onClick={() => {\n                      if (!analyze_locked) setAccuracy(!show_accuracy)\n                    }}\n                    style={{\n                      display: 'flex',\n                      paddingLeft: grem / 4,\n                      paddingRight: grem / 4,\n                      height: grem * 2,\n                      opacity: analyze_locked ? 1 : null,\n                      cursor: analyze_locked ? 'default' : 'pointer',\n                    }}\n                  >\n                    <div\n                      style={{\n                        width: grem * 0.5,\n                        height: grem * 0.5,\n                        border: 'solid 1px black',\n                        marginTop: grem * (6 / 8),\n                        marginRight: grem * (2 / 8),\n                        background: show_accuracy ? 'black' : 'white',\n                      }}\n                    />\n                    <div\n                      style={{\n                        paddingTop: grem / 2,\n                        paddingBottom: grem / 2,\n                        textDecoration: analyze_locked ? 'none' : 'underline',\n                      }}\n                    >\n                      accuracy\n                    </div>\n                  </button>\n                  <button\n                    onClick={() => {\n                      if (!analyze_locked) setCompare(!compare)\n                    }}\n                    style={{\n                      display: 'flex',\n                      paddingLeft: grem / 4,\n                      paddingRight: grem / 4,\n                      height: grem * 2,\n                      opacity: analyze_locked ? 1 : null,\n                      cursor: analyze_locked ? 'default' : 'pointer',\n                    }}\n                  >\n                    <div\n                      style={{\n                        width: grem * 0.5,\n                        height: grem * 0.5,\n                        border: 'solid 1px black',\n                        marginTop: grem * (6 / 8),\n                        marginRight: grem * (2 / 8),\n                        background: compare ? 'black' : 'white',\n                      }}\n                    />\n                    <div\n                      style={{\n                        paddingTop: grem / 2,\n                        paddingBottom: grem / 2,\n                        textDecoration: analyze_locked ? 'none' : 'underline',\n                      }}\n                    >\n                      model comparison\n                    </div>\n                  </button>\n                </div>\n              </>\n            ) : null}\n            {analyze && !compare ? (\n              <div\n                style={{\n                  padding: `${show_accuracy && false ? 0 : grem / 2}px ${grem /\n                    2}px`,\n                  flexGrow: 1,\n                }}\n              >\n                <div style={{ position: 'relative', overflow: 'hidden' }}>\n                  {combined.map((c, i) => (\n                    <div\n                      style={{\n                        position: 'absolute',\n                        left: `${(1 / combined.length) * i * 100}%`,\n                        top: 0,\n                        bottom: 0,\n                        width: `${(1 / combined.length) * 100 + 0.05}%`,\n                        background:\n                          c.class === 'pos'\n                            ? scaleBlue(c.certainty)\n                            : scaleRed(c.certainty),\n                      }}\n                    />\n                  ))}\n\n                  <div style={{ position: 'relative' }}>\n                    {combined.length} {total ? 'total ' : ''} review\n                    {combined.length > 1 ? 's' : ''}\n                    {analyze ? (\n                      <span>\n                        {' '}\n                        &middot; {counts[1]} positive (\n                        {Math.round((counts[1] / combined.length) * 100)}%)\n                      </span>\n                    ) : null}\n                  </div>\n                </div>\n                {show_accuracy ? (\n                  <div>\n                    <div\n                      style={{\n                        position: 'relative',\n                        overflow: 'hidden',\n                      }}\n                    >\n                      {combined.map((c, i) => (\n                        <div\n                          style={{\n                            position: 'absolute',\n                            left: `${(1 / combined.length) * i * 100}%`,\n                            bottom: 0,\n                            height: grem,\n                            width: `${(1 / combined.length) * 100 + 0.05}%`,\n                            background:\n                              c.label !== c.class\n                                ? c.label === 'pos'\n                                  ? scaleBlue(1)\n                                  : scaleRed(1)\n                                : 'white',\n                          }}\n                        />\n                      ))}\n\n                      <div style={{ position: 'relative' }}>\n                        {rightwrong[0] > 0 ? (\n                          <span>\n                            {Math.floor((accuracy * 1000) / 10)}% accuracy (\n                            {rightwrong[0]} wrong)\n                          </span>\n                        ) : (\n                          <span>\n                            {Math.floor((accuracy * 1000) / 10)}% accuracy\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ) : null}\n              </div>\n            ) : null}\n          </div>\n          <Border />\n        </div>\n        {compare && analyze ? (\n          <div>\n            <div\n              style={{\n                display: 'grid',\n                gridTemplateColumns: '1fr 1fr',\n              }}\n            >\n              {[['NBSVM'], ['BERT']].map((item, i) => {\n                let n = i === 0\n                let cert = n ? ncombined : combined\n                let co = n ? ncounts : counts\n                let rw = n ? nrightwrong : rightwrong\n                let acc = n ? naccuracy : accuracy\n                return (\n                  <div\n                    style={{\n                      borderLeft: i === 1 ? 'solid 2px black' : 'none',\n                      marginLeft: i === 1 ? -1 : 0,\n                      background: 'white',\n                      display: 'flex',\n                    }}\n                  >\n                    <div\n                      style={{\n                        paddingLeft: grem / 2,\n                        paddingTop: grem / 2,\n                        paddingBottom: grem / 2,\n                      }}\n                    >\n                      {item[0]}\n                    </div>\n                    <div\n                      style={{\n                        padding: `${\n                          show_accuracy && false ? 0 : grem / 2\n                        }px ${grem / 2}px`,\n                        flexGrow: 1,\n                      }}\n                    >\n                      <div style={{ position: 'relative', overflow: 'hidden' }}>\n                        {cert.map((c, i) => (\n                          <div\n                            style={{\n                              position: 'absolute',\n                              left: `${(1 / combined.length) * i * 100}%`,\n                              top: 0,\n                              bottom: 0,\n                              width: `${(1 / combined.length) * 100 + 0.05}%`,\n                              background:\n                                c.class === 'pos'\n                                  ? scaleBlue(c.certainty)\n                                  : scaleRed(c.certainty),\n                            }}\n                          />\n                        ))}\n\n                        <div style={{ position: 'relative' }}>\n                          {combined.length} {total ? 'total ' : ''} review\n                          {combined.length > 1 ? 's' : ''}\n                          {analyze ? (\n                            <span>\n                              {' '}\n                              &middot; {co[1]} positive (\n                              {Math.round((co[1] / combined.length) * 100)}\n                              %)\n                            </span>\n                          ) : null}\n                        </div>\n                      </div>\n                      {show_accuracy ? (\n                        <div>\n                          <div\n                            style={{\n                              position: 'relative',\n                              overflow: 'hidden',\n                            }}\n                          >\n                            {cert.map((c, i) => (\n                              <div\n                                style={{\n                                  position: 'absolute',\n                                  left: `${(1 / combined.length) * i * 100}%`,\n                                  bottom: 0,\n                                  height: grem,\n                                  width: `${(1 / combined.length) * 100 +\n                                    0.05}%`,\n                                  background:\n                                    c.label !== c.class\n                                      ? c.label === 'pos'\n                                        ? scaleBlue(1)\n                                        : scaleRed(1)\n                                      : '#fff',\n                                }}\n                              />\n                            ))}\n\n                            <div style={{ position: 'relative' }}>\n                              {rw[0] > 0 ? (\n                                <span>\n                                  {Math.floor((acc * 1000) / 10)}% accuracy (\n                                  {rw[0]} wrong)\n                                </span>\n                              ) : (\n                                <span>\n                                  {Math.floor((acc * 1000) / 10)}% accuracy\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      ) : null}\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n            <Border />\n          </div>\n        ) : null}\n      </div>\n    )\n  }\n}\nexport default Bar\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAEA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AADA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AAEA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAkgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAPA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AApfA;AACA;AAqfA;;;;A","sourceRoot":""}