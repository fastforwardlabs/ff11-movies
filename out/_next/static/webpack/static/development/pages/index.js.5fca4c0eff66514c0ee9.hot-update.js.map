{"version":3,"file":"static/webpack/static/development/pages/index.js.5fca4c0eff66514c0ee9.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React from 'react'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\nimport * as chroma from 'chroma-js'\nimport Bar from '../parts/Bar'\nimport { p } from '../parts/Utils'\nimport {\n  red,\n  blue,\n  scaleRed,\n  scaleBlue,\n  readableSentiment,\n  class_labels,\n  Border,\n} from '../parts/Static'\nimport MovieGrid from '../parts/MovieGrid'\n\nclass Index extends React.Component {\n  componentDidMount() {\n    // let boxed = data.reduce((dict, current) => {\n    //   let slice = Object.assign({}, dict)\n    //   if (slice[current.url] === undefined) {\n    //     slice[current.url] = 'exists'\n    //   }\n    //   return slice\n    // }, {})\n    // let movie_keys = Object.keys(boxed)\n    // var promises = movie_keys.map((k, i) => {\n    //   return fetch(`http://www.omdbapi.com/?apikey=af4abd65&i=${k}`)\n    //     .then(r => r.json())\n    //     .then(json => {\n    //       let og_id = k\n    //       if (json.Title === '#DUPE#') {\n    //         return fetch(\n    //           `http://www.omdbapi.com/?apikey=af4abd65&i=${json.imdbID}`\n    //         )\n    //           .then(r => r.json())\n    //           .then(json => {\n    //             let json_mod = Object.assign({}, json)\n    //             json_mod.og_id = og_id\n    //             return json_mod\n    //           })\n    //       } else {\n    //         let json_mod = Object.assign({}, json)\n    //         json_mod.og_id = og_id\n    //         return json_mod\n    //       }\n    //     })\n    // })\n    // Promise.all(promises).then(function(results) {\n    //   console.log(JSON.stringify(results))\n    // })\n  }\n\n  render() {\n    let {\n      font_size,\n      line_height,\n      grem,\n      analyze,\n      data,\n      info,\n      reviews,\n      setAnalyze,\n      sort,\n      setSort,\n      show_accuracy,\n      setAccuracy,\n      compare,\n      setCompare,\n      nbsvm_data,\n      hl_options = {},\n    } = this.props\n\n    // compare and show_accuracy only when analyze is on\n    show_accuracy = show_accuracy && analyze\n    compare = compare && analyze\n\n    let stick_top = grem * 2\n    if (show_accuracy || compare) stick_top = grem * 3\n    if (show_accuracy && compare) {\n      stick_top = grem * 5\n    } else if (show_accuracy) {\n      stick_top = grem * 3\n    } else if (compare) {\n      stick_top = grem * 4\n    }\n\n    return (\n      <div style={{ paddingBottom: grem / 2 }}>\n        <Bar\n          grem={grem}\n          setAnalyze={setAnalyze}\n          analyze={analyze}\n          total={true}\n          setAlgo={this.props.setAlgo}\n          algnames={this.props.algnames}\n          data_select={this.props.data_select}\n          show_accuracy={show_accuracy}\n          setAccuracy={setAccuracy}\n          compare={compare}\n          setCompare={setCompare}\n          data={data}\n          nbsvm_data={nbsvm_data}\n          is_front={true}\n          hl_options={hl_options}\n        />\n\n        <div\n          style={{\n            position: 'relative',\n            // top: stick_top,\n            background: 'white',\n            zIndex: 99,\n          }}\n        >\n          <div\n            style={{\n              display: 'flex',\n              flexWrap: 'wrap',\n              padding: p(grem / 4),\n            }}\n          >\n            <div\n              style={{\n                padding: p(grem / 4),\n              }}\n            >\n              {data.length} movies & shows sorted by most:\n            </div>\n            <div\n              style={{\n                display: 'flex',\n                flexWrap: 'wrap',\n              }}\n            >\n              {(analyze\n                ? show_accuracy\n                  ? [\n                      ['reviews', 'reviews'],\n                      ['positive', 'positive'],\n                      ['negative', 'negative'],\n                      ['accurate', 'accurate'],\n                      ['inaccurate', 'inaccurate'],\n                    ]\n                  : [\n                      ['reviews', 'reviews'],\n                      ['positive', 'positive'],\n                      ['negative', 'negative'],\n                    ]\n                : [['reviews', 'reviews']]\n              ).map(a =>\n                sort === a[1] ? (\n                  <div\n                    style={{\n                      background: '#222',\n                      color: 'white',\n                      padding: p(0, grem / 4),\n                    }}\n                  >\n                    {a[0]}\n                  </div>\n                ) : (\n                  <button\n                    onClick={() => {\n                      setSort(a[1])\n                    }}\n                    style={{\n                      textDecoration: 'underline',\n                      padding: grem / 4,\n                    }}\n                  >\n                    {a[0]}\n                  </button>\n                )\n              )}\n            </div>\n          </div>\n          <Border />\n        </div>\n        <div\n          style={{\n            display: compare ? 'grid' : 'block',\n            gridTemplateColumns: '1fr 1fr',\n            marginBottom: -grem / 2,\n          }}\n        >\n          {compare ? (\n            <div style={{ marginRight: -1, borderRight: 'solid 2px black' }}>\n              <div style={{ marginRight: -1 }}>\n                <MovieGrid\n                  data={nbsvm_data}\n                  info={info}\n                  grem={grem}\n                  sort={sort}\n                  analyze={analyze}\n                  show_accuracy={show_accuracy}\n                  hl_options={hl_options}\n                />\n              </div>\n            </div>\n          ) : null}\n\n          <MovieGrid\n            data={data}\n            info={info}\n            grem={grem}\n            sort={sort}\n            analyze={analyze}\n            show_accuracy={show_accuracy}\n            hl_options={hl_options}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Index\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;;;;;;;;;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAoBA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AADA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAGA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAZA;AA2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;;;;AAtMA;AACA;AAwMA;;;;A","sourceRoot":""}