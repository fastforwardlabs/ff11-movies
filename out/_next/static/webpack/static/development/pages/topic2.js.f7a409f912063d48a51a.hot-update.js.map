{"version":3,"file":"static/webpack/static/development/pages/topic2.js.f7a409f912063d48a51a.hot-update.js","sources":["webpack:///./parts/Bar.js"],"sourcesContent":["import React from 'react'\nimport * as chroma from 'chroma-js'\nimport { scaleRed, scaleBlue } from './Static'\n\nclass Bar extends React.Component {\n  render() {\n    let {\n      grem,\n      analyze,\n      setAnalyze,\n      combined,\n      total,\n      setAlgo,\n      accuracy,\n      rightwrong,\n      show_accuracy,\n      setAccuracy,\n    } = this.props\n\n    let counts = [\n      combined.filter(r => r.class === 'neg').length,\n      combined.filter(r => r.class === 'pos').length,\n    ]\n\n    return (\n      <div\n        style={{\n          // background: analyze ? chroma('orchid').luminance(0.25) : 'white',\n          // color: 'white',\n          border: 'solid 1px black',\n          borderBottom: 'solid 3px black',\n          borderRight: 'solid 2px black',\n          background: 'white',\n          position: 'fixed',\n          left: grem / 2,\n          bottom: grem * 1.5,\n          paddingLeft: grem / 4,\n          paddingRight: grem / 4,\n          zIndex: 99,\n          width: analyze ? `calc(100% - ${grem}px)` : 'auto',\n        }}\n      >\n        <div\n          style={{\n            height: grem * 2,\n            // borderBottom: 'solid 1px black',\n            display: 'flex',\n            justifyContent: 'space-between',\n          }}\n        >\n          <div style={{ display: 'flex', height: grem }}>\n            <button\n              className=\"no-opacity-hover\"\n              style={{\n                paddingTop: grem / 2,\n                paddingBottom: grem / 2,\n                paddingLeft: grem / 4,\n                paddingRight: grem / 4,\n                display: 'flex',\n              }}\n              onClick={() => {\n                if (analyze) {\n                  setAnalyze(false)\n                } else {\n                  setAnalyze(true)\n                }\n              }}\n            >\n              <div style={{ paddingLeft: grem / 4, paddingRight: grem / 4 }}>\n                Analysis:\n              </div>\n              {[['on', true], ['off', false]].map(a => (\n                <div\n                  className={analyze !== a[1] ? 'opacity-inner-hover' : ''}\n                  style={{\n                    paddingLeft: grem / 4,\n                    paddingRight: grem / 4,\n                    background: analyze === a[1] ? '#222' : 'none',\n                    color: analyze === a[1] ? 'white' : 'black',\n                    textDecoration: analyze === a[1] ? 'none' : 'underline',\n                  }}\n                >\n                  {a[0]}\n                </div>\n              ))}\n            </button>\n            {analyze ? (\n              <>\n                <div\n                  style={{\n                    display: 'flex',\n                    paddingRight: grem / 4,\n                    paddingTop: grem / 2,\n                    paddingBottom: grem / 2,\n                  }}\n                >\n                  <div\n                    style={{ paddingLeft: grem / 4, paddingRight: grem / 4 }}\n                  >\n                    Model:\n                  </div>\n                  {this.props.algnames.map((n, i) =>\n                    this.props.data_select === i ? (\n                      <div\n                        style={{\n                          paddingLeft: grem / 4,\n                          paddingRight: grem / 4,\n                          height: grem,\n                          background: '#222',\n                          color: 'white',\n                        }}\n                      >\n                        {n}\n                      </div>\n                    ) : (\n                      <button\n                        onClick={() => {\n                          setAlgo(i)\n                        }}\n                        style={{\n                          paddingLeft: grem / 4,\n                          paddingRight: grem / 4,\n                          textDecoration: 'underline',\n                          height: grem,\n                        }}\n                      >\n                        {n}\n                      </button>\n                    )\n                  )}\n                </div>\n                <div style={{ display: 'flex' }}>\n                  <button\n                    className=\"no-opacity-hover\"\n                    style={{\n                      paddingTop: grem / 2,\n                      paddingBottom: grem / 2,\n                      paddingLeft: grem / 4,\n                      paddingRight: grem / 4,\n                      display: 'flex',\n                    }}\n                    onClick={() => {\n                      if (analyze) {\n                        setAnalyze(false)\n                      } else {\n                        setAnalyze(true)\n                      }\n                    }}\n                  >\n                    <div style={{ paddingLeft: grem / 4, paddingRight: 0 }}>\n                      Accuracy:\n                    </div>\n                    <div\n                      className={'opacity-inner-hover'}\n                      style={{\n                        paddingLeft: grem / 4,\n                        paddingRight: grem / 4,\n                        textDecoration: 'underline',\n                      }}\n                    >\n                      hide\n                    </div>\n                  </button>\n                </div>\n              </>\n            ) : null}\n          </div>\n\n          <div\n            style={{\n              paddingLeft: grem / 2,\n              paddingRight: grem / 2,\n              flexGrow: 1,\n            }}\n          >\n            <div>\n              <div style={{ position: 'relative' }}>\n                {analyze ? (\n                  <div\n                    style={{\n                      position: 'absolute',\n                      left: 0,\n                      top: 0,\n                      right: 0,\n                      bottom: 0,\n                      mixBlendMode: 'multiply',\n                      overflow: 'hidden',\n                    }}\n                  >\n                    {combined.map((c, i) => (\n                      <div\n                        style={{\n                          position: 'absolute',\n                          left: `${(1 / combined.length) * i * 100}%`,\n                          top: 0,\n                          bottom: 0,\n                          width: `${(1 / combined.length) * 100 + 0.05}%`,\n                          background:\n                            c.class === 'pos'\n                              ? scaleBlue(c.certainty)\n                              : scaleRed(c.certainty),\n                        }}\n                      />\n                    ))}\n                  </div>\n                ) : null}\n                {combined.length} {total ? 'total ' : ''} reviews\n                {analyze ? (\n                  <span>\n                    {' '}\n                    &middot; {counts[1]} positive (\n                    {Math.round((counts[1] / combined.length) * 100)}%)\n                  </span>\n                ) : null}\n              </div>\n            </div>\n            <div>\n              <div\n                style={{\n                  position: 'relative',\n                  overflow: 'hidden',\n                }}\n              >\n                {combined.map((c, i) => (\n                  <div\n                    style={{\n                      position: 'absolute',\n                      left: `${(1 / combined.length) * i * 100}%`,\n                      bottom: 0,\n                      height: grem,\n                      width: `${(1 / combined.length) * 100 + 0.05}%`,\n                      background:\n                        c.label !== c.class\n                          ? c.label === 'pos'\n                            ? scaleBlue(1)\n                            : scaleRed(1)\n                          : '#ddd',\n                    }}\n                  />\n                ))}\n\n                <div style={{ position: 'relative' }}>\n                  {rightwrong[0] > 0 ? (\n                    <span>\n                      {Math.floor((accuracy * 1000) / 10)}% accuracy (\n                      {rightwrong[0]} wrong)\n                    </span>\n                  ) : (\n                    <span>{Math.floor((accuracy * 1000) / 10)}% accuracy</span>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\nexport default Bar\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAkBA;AACA;AACA;AACA;AACA;AAJA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAdA;AA8BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;;AA7PA;AACA;AA8PA;;;;A","sourceRoot":""}