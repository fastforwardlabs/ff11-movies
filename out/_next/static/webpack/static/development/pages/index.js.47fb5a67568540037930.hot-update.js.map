{"version":3,"file":"static/webpack/static/development/pages/index.js.47fb5a67568540037930.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React from 'react'\nimport Link from '../parts/PrefixedLink'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\nimport * as chroma from 'chroma-js'\nimport Bar from '../parts/Bar'\nimport { red, blue, scaleRed, scaleBlue } from '../parts/Static'\n\nlet class_labels = ['negative', 'positive']\n\nclass Index extends React.Component {\n  componentDidMount() {\n    // let boxed = data.reduce((dict, current) => {\n    //   let slice = Object.assign({}, dict)\n    //   if (slice[current.url] === undefined) {\n    //     slice[current.url] = 'exists'\n    //   }\n    //   return slice\n    // }, {})\n    // let movie_keys = Object.keys(boxed)\n    // var promises = movie_keys.map((k, i) => {\n    //   return fetch(`http://www.omdbapi.com/?apikey=af4abd65&i=${k}`)\n    //     .then(r => r.json())\n    //     .then(json => {\n    //       let og_id = k\n    //       if (json.Title === '#DUPE#') {\n    //         return fetch(\n    //           `http://www.omdbapi.com/?apikey=af4abd65&i=${json.imdbID}`\n    //         )\n    //           .then(r => r.json())\n    //           .then(json => {\n    //             let json_mod = Object.assign({}, json)\n    //             json_mod.og_id = og_id\n    //             return json_mod\n    //           })\n    //       } else {\n    //         let json_mod = Object.assign({}, json)\n    //         json_mod.og_id = og_id\n    //         return json_mod\n    //       }\n    //     })\n    // })\n    // Promise.all(promises).then(function(results) {\n    //   console.log(JSON.stringify(results))\n    // })\n  }\n\n  render() {\n    let {\n      font_size,\n      line_height,\n      grem,\n      analyze,\n      data,\n      info,\n      reviews,\n      setAnalyze,\n      sort,\n    } = this.props\n    let sorted = info.map(o => {\n      return {\n        title: o.Title,\n        id: o.og_id,\n        plot: o.Plot,\n        poster: o.Poster,\n        children: [],\n      }\n    })\n    let ids = sorted.map(o => o.id)\n    if (data !== null) {\n      for (let i = 0; i < data.length; i++) {\n        let o = data[i]\n        let id = o.url\n        let index = ids.indexOf(id)\n        if (index === -1) {\n          console.log('miss')\n        } else {\n          sorted[index].children.push(o)\n        }\n      }\n      if (sort === 'reviews') {\n        sorted = _.sortBy(sorted, [\n          function(o) {\n            return o.children.length\n          },\n        ])\n        sorted.reverse()\n      } else {\n        sorted = _.sortBy(sorted, [\n          function(o) {\n            return (\n              o.children.reduce(\n                (total, r) => (r.class === 'neg' ? total + 1 : total),\n                0\n              ) / o.children.length\n            )\n          },\n        ])\n      }\n    }\n\n    let pos_count = data.reduce((total, o) => {\n      if (o.class === 'pos') {\n        return (total = total + 1)\n      } else {\n        return total\n      }\n    }, 0)\n\n    let neg_count = data.reduce((total, o) => {\n      if (o.class === 'neg') {\n        return (total = total + 1)\n      } else {\n        return total\n      }\n    }, 0)\n\n    // overloading this variables, will probably come back to bite me\n    let winner_name = 'positive'\n    if (neg_count > pos_count) winner_name = 'negative'\n    let total_counts = [neg_count, pos_count]\n\n    let certainty_array = data.map(r => {\n      if (r.logits[1] > r.logits[0]) {\n        return {\n          class: r.class,\n          certainty: r.class_probabilities[1],\n        }\n      } else {\n        return {\n          class: r.class,\n          certainty: r.class_probabilities[0],\n        }\n      }\n    })\n    let pos = _.sortBy(\n      certainty_array.filter(r => r.class === 'pos'),\n      'certainty'\n    ).reverse()\n    let neg = _.sortBy(\n      certainty_array.filter(r => r.class === 'neg'),\n      'certainty'\n    )\n    let combined = [...pos, ...neg]\n\n    return (\n      <div>\n        <div>\n          <div style={{ paddingBottom: grem * 3 }}>\n            <div\n              style={{\n                borderBottom: 'none',\n                margin: `0 auto`,\n                display: 'grid',\n                gridTemplateColumns: `repeat(auto-fit, minmax(240px, 1fr))`,\n                gridColumnGap: grem,\n                gridRowGap: grem,\n                padding: `0 ${grem / 2}px`,\n              }}\n            >\n              {data ? (\n                <>\n                  {sorted.map((o, i) => {\n                    let reviews = data.filter(r => r.url === o.id)\n\n                    let counts = reviews.reduce(\n                      (counts, r) => {\n                        let slice = counts.slice()\n                        if (r.logits[1] > r.logits[0]) {\n                          slice[1] += 1\n                        } else {\n                          slice[0] += 1\n                        }\n                        return slice\n                      },\n                      [0, 0]\n                    )\n\n                    let actual = reviews.reduce(\n                      (counts, r) => {\n                        let slice = counts.slice()\n                        if (r.label === 'pos') {\n                          slice[1] += 1\n                        } else if (r.label === 'neg') {\n                          slice[0] += 1\n                        }\n                        return slice\n                      },\n                      [0, 0]\n                    )\n\n                    let rightwrong = reviews.reduce(\n                      (counts, r) => {\n                        let slice = counts.slice()\n                        if (r.label === r.class) {\n                          slice[1] += 1\n                        } else {\n                          slice[0] += 1\n                        }\n                        return slice\n                      },\n                      [0, 0]\n                    )\n                    let accuracy = rightwrong[1] / reviews.length\n\n                    let winner_count_index = 0\n                    if (counts[1] > counts[0]) winner_count_index = 1\n                    let winner_names = ['negative', 'positive']\n                    let winner_name = winner_names[winner_count_index]\n\n                    let certainty_array = reviews.map(r => {\n                      if (r.logits[1] > r.logits[0]) {\n                        return {\n                          class: r.class,\n                          certainty: r.class_probabilities[1],\n                        }\n                      } else {\n                        return {\n                          class: r.class,\n                          certainty: r.class_probabilities[0],\n                        }\n                      }\n                    })\n                    let pos = _.sortBy(\n                      certainty_array.filter(r => r.class === 'pos'),\n                      'certainty'\n                    ).reverse()\n                    let neg = _.sortBy(\n                      certainty_array.filter(r => r.class === 'neg'),\n                      'certainty'\n                    )\n                    let combined = [...pos, ...neg]\n\n                    return (\n                      <Link href={`/topic?id=${o.id}`}>\n                        <a\n                          className=\"no-underline over-hover-container\"\n                          style={{\n                            border: 'solid 1px black',\n                            position: 'relative',\n                            overflow: 'hidden',\n                            height: 13 * grem,\n                          }}\n                        >\n                          <div\n                            style={{\n                              position: 'absolute',\n                              left: 0,\n                              top: 0,\n                              right: 0,\n                              height: grem * 7,\n                              backgroundImage: `url(${o.poster})`,\n                              backgroundSize: 'cover',\n                              backgroundPosition: 'center 25%',\n                              // filter: `grayscale(100%) contrast(10) brightness(2) opacity(85%)`,\n                              imageRendering: 'pixelated',\n                              // filter: `grayscale(1)`,\n                            }}\n                          />\n\n                          {analyze ? (\n                            <div\n                              style={{\n                                position: 'absolute',\n                                left: 0,\n                                right: 0,\n                                bottom: 0,\n                                height: grem / 4,\n                                mixBlendMode: 'multiply',\n                              }}\n                            >\n                              {combined.map((c, i) => (\n                                <div\n                                  style={{\n                                    position: 'absolute',\n                                    left: `${(1 / combined.length) * i * 100}%`,\n                                    top: 0,\n                                    bottom: 0,\n                                    width: `${(1 / combined.length) * 100 +\n                                      0.05}%`,\n                                    background:\n                                      c.class === 'pos'\n                                        ? scaleBlue(c.certainty)\n                                        : scaleRed(c.certainty),\n                                  }}\n                                />\n                              ))}\n                            </div>\n                          ) : null}\n\n                          <div\n                            style={{\n                              position: 'absolute',\n                              left: 0,\n                              bottom: 0,\n                              right: 0,\n                              borderTop: `solid 1px black`,\n                            }}\n                          >\n                            <div\n                              style={{ padding: grem / 2, background: 'white' }}\n                            >\n                              <div\n                                style={{\n                                  fontWeight: 700,\n                                }}\n                              >\n                                {o.title}\n                              </div>\n                              <div\n                                style={{\n                                  fontSize: font_size * 0.875,\n                                  lineHeight: line_height,\n                                  height: grem * 0.875 * 3,\n                                  overflow: 'hidden',\n                                }}\n                              >\n                                {o.plot}\n                              </div>\n                            </div>\n                            <div\n                              style={{\n                                fontSize: font_size * 0.875,\n                                position: 'relative',\n                                borderTop: 'solid 1px black',\n                                padding: `${grem / 4}px ${grem / 2}px ${(grem *\n                                  3) /\n                                  8}px ${grem / 2}px`,\n                              }}\n                            >\n                              <div\n                                style={{\n                                  position: 'relative',\n                                }}\n                              >\n                                {o.children.length} reviews\n                                {analyze ? (\n                                  <span>\n                                    {' '}\n                                    &middot;{' '}\n                                    {Math.round(\n                                      (counts[winner_count_index] /\n                                        reviews.length) *\n                                        100\n                                    )}\n                                    % {winner_name}\n                                  </span>\n                                ) : null}\n                                <div style={{ display: 'none' }}>\n                                  {analyze ? (\n                                    <>\n                                      <div>\n                                        {Math.round(\n                                          (counts[winner_count_index] /\n                                            reviews.length) *\n                                            1000\n                                        ) / 10}\n                                        % {winner_name}\n                                      </div>\n                                      <div>\n                                        {counts[1]} | {counts[0]}\n                                      </div>\n                                      <div>\n                                        actual: {actual[1]} | {actual[0]}\n                                      </div>\n                                      <div>\n                                        accuracy:{' '}\n                                        {Math.round(accuracy * 1000) / 10}%\n                                      </div>\n                                    </>\n                                  ) : null}\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"over-hover\" />\n                        </a>\n                      </Link>\n                    )\n                  })}\n                </>\n              ) : null}\n            </div>\n          </div>\n        </div>\n        <Bar\n          grem={grem}\n          setAnalyze={setAnalyze}\n          analyze={analyze}\n          combined={combined}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Index\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAckBA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAPA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAoiYA;;;;A","sourceRoot":""}