{"version":3,"file":"static/webpack/static/development/pages/_app.js.0b5626bdf16efddd9ca1.hot-update.js","sources":["webpack:///./parts/Tour.js"],"sourcesContent":["import React from 'react'\nimport Head from 'next/Head'\nimport App, { Container } from 'next/app'\nimport { nouns, adjectives } from '../data/corpora.js'\nimport { red, blue, Border } from '../parts/Static'\nimport Scene from '../parts/Scene'\nimport Topic2 from '../pages/Topic2'\nimport Index from '../pages/Index'\nimport Disagreements from '../pages/Disagreements'\n\nlet choreography = [0, 1]\n\nclass Tour extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      scroll: 0,\n      step: 0,\n      offsets: null,\n      wh: null,\n    }\n    this.scrollRef = React.createRef()\n    this.frameRef = React.createRef()\n    this.scrollNext = this.scrollNext.bind(this)\n  }\n\n  componentDidMount() {\n    this.setState({ wh: window.innerHeight })\n\n    let scroller = this.scrollRef.current\n    let framer = this.frameRef.current\n    let wh = this.state.wh || window.innerHeight\n    let offsets =\n      this.state.offsets ||\n      Array.from(scroller.querySelectorAll('.scene')).map(n => n.offsetTop)\n    this.setState({\n      offsets: offsets,\n    })\n\n    scroller.addEventListener('scroll', () => {\n      let last = offsets.length * wh\n      for (let i = 0; i < offsets.length; i++) {\n        let r = offsets.length - 1 - i\n        let thresh = offsets[r]\n        if (scroller.scrollTop > thresh - wh * (31 / 32)) {\n          if (r === offsets.length - 1) {\n            this.props.showInfo(false)\n            this.setState({ step: 0 })\n          } else {\n            this.setState({ step: r })\n          }\n          break\n        }\n      }\n    })\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.onScroll, false)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    let grem = this.props.grem\n    let step = this.state.step\n    let prev_step = prevState.step\n    let smooth = 'smooth'\n    if (step !== 0 && step !== prev_step) {\n      let scroller = document.getElementById('frame-scroller')\n      if (step === 8) {\n        let scroll_to =\n          document.getElementById('sentences-block').offsetTop - grem * 2\n        scroller.scroll({ left: 0, top: scroll_to, behavior: smooth })\n      } else if (step === 7) {\n        let scroll_to =\n          document.getElementById('reviews-block').offsetTop - grem * 2\n        scroller.scroll({ left: 0, top: scroll_to, behavior: smooth })\n      } else if (step === 9) {\n        scroller.scroll({ left: 0, top: 0 })\n      } else if (step === 12) {\n        let scroll_to =\n          document.getElementById('reviews-block').offsetTop - grem * 3\n        scroller.scroll({ left: 0, top: scroll_to, behavior: smooth })\n      } else if (step === 13) {\n        let scroll_to =\n          document.getElementById('reviews-block').offsetTop - grem * 5\n        scroller.scroll({ left: 0, top: scroll_to, behavior: smooth })\n      } else if (step === 14) {\n        let scroll_to =\n          document.getElementById('reviews-block').offsetTop - grem * 5\n        scroller.scroll({ left: 0, top: scroll_to, behavior: smooth })\n      } else if (step < 16) {\n        scroller.scroll({ left: 0, top: 0, behavior: 'auto' })\n      }\n    }\n  }\n\n  scrollNext() {\n    let current = this.state.step\n    let scroller = this.scrollRef.current\n    scroller.scroll({\n      left: 0,\n      top: this.state.offsets[current + 1] - this.state.wh * (10 / 16),\n      behavior: 'smooth',\n    })\n  }\n\n  render() {\n    let {\n      font_size,\n      line_height,\n      data_select,\n      grem,\n      router,\n      analyze,\n      data,\n      info,\n      setAnalyze,\n      review_sort,\n      setReviewSort,\n      show_accuracy,\n      setAccuracy,\n      compare,\n      setCompare,\n      nbsvm_data,\n      sort,\n      showInfo,\n      setSort,\n    } = this.props\n    let { show_info, reviews_length, movies_length } = this.props\n    let { wh, step } = this.state\n\n    let index_sort = 'reviews'\n    if (step === 3) index_sort = 'positive'\n    if (step === 4) index_sort = 'negative'\n\n    let index_accuracy = false\n    if (step > 9) index_accuracy = true\n\n    let reviews_accuracy = false\n    if (step > 9) reviews_accuracy = true\n\n    let review_id = 'tt0384793'\n    if (step > 9) review_id = 'tt0069994'\n\n    let reviews_sort = 'date'\n    if (step > 11) reviews_sort = 'inaccurate'\n    if (step > 13) reviews_sort = 'date'\n\n    let reviews_compare = false\n    if (step > 12) reviews_compare = true\n\n    let hl_options = {}\n    // if (step === 2 || step === 6) hl_options.highlight_analysis_bar = true\n    // if (step === 3 || step === 4) hl_options.highlight_first_in_grid = true\n    // if (step === 7) hl_options.highlight_reviews_block = true\n    // if (step === 8) hl_options.highlight_sentences_block = true\n\n    let space = 0.75\n\n    let next = (\n      <div style={{ marginTop: grem * 0 }}>\n        <button\n          onClick={this.scrollNext}\n          style={{ textDecoration: 'underline' }}\n        >\n          Next â†“\n        </button>\n      </div>\n    )\n\n    let scene_bar = false\n      ? null\n      : num => (\n          <div\n            style={{\n              marginTop: -grem / 2,\n              marginLeft: -grem / 2,\n              marginRight: -grem / 2,\n              marginBottom: grem / 2,\n              display: 'none',\n            }}\n          >\n            <div\n              style={{\n                display: 'flex',\n                justifyContent: 'space-between',\n              }}\n            >\n              <div\n                style={{\n                  paddingTop: grem / 4,\n                  paddingBottom: grem / 4,\n                  paddingLeft: grem / 2,\n                  paddingRight: grem / 2,\n                }}\n              >\n                Screen {num}\n              </div>\n              <button\n                style={{\n                  paddingTop: grem / 4,\n                  paddingBottom: grem / 4,\n                  paddingLeft: grem / 2,\n                  paddingRight: grem / 2,\n                  textDecoration: 'underline',\n                }}\n                onClick={() => {\n                  showInfo(false)\n                }}\n              >\n                &times;\n              </button>\n            </div>\n            <Border />\n          </div>\n        )\n\n    return (\n      <div\n        style={{\n          position: 'fixed',\n          left: 0,\n          top: 0,\n          right: 0,\n          bottom: 0,\n          zIndex: 9999,\n        }}\n        ref={this.frameRef}\n      >\n        {step > 0 && step < 16 ? (\n          <div\n            id=\"frame-scroller\"\n            style={{\n              position: 'fixed',\n              left: 0,\n              top: grem * 2,\n              right: 0,\n              bottom: 0,\n              background: 'white',\n              overflow: 'hidden',\n              // borderLeft: `solid ${grem / 2}px #222`,\n              height: 'calc(100vh - 3rem)',\n            }}\n          >\n            {data !== null && nbsvm_data !== null ? (\n              <div>\n                {(step > 0 && step < 5) || (step > 8 && step < 11) ? (\n                  <Index\n                    grem={grem}\n                    font_size={font_size}\n                    line_height={line_height}\n                    grem={grem}\n                    analyze={step === 1 ? false : true}\n                    data={data}\n                    info={info}\n                    sort={index_sort}\n                    review_sort={review_sort}\n                    setAnalyze={setAnalyze}\n                    setSort={setSort}\n                    setReviewSort={setReviewSort}\n                    show_accuracy={index_accuracy}\n                    setAccuracy={setAccuracy}\n                    router={{ query: { id: 'tt0762073' } }}\n                    compare={compare}\n                    setCompare={setCompare}\n                    nbsvm_data={nbsvm_data}\n                    hl_options={hl_options}\n                  />\n                ) : null}\n\n                {step > 4 && step < 15 ? (\n                  <Topic2\n                    grem={grem}\n                    font_size={font_size}\n                    line_height={line_height}\n                    grem={grem}\n                    analyze={step < 6 ? false : true}\n                    data={data}\n                    info={info}\n                    sort={sort}\n                    review_sort={reviews_sort}\n                    setAnalyze={setAnalyze}\n                    setSort={setSort}\n                    setReviewSort={setReviewSort}\n                    show_accuracy={reviews_accuracy}\n                    setAccuracy={setAccuracy}\n                    router={{ query: { id: review_id } }}\n                    compare={reviews_compare}\n                    setCompare={setCompare}\n                    nbsvm_data={nbsvm_data}\n                    hl_options={hl_options}\n                    tour={true}\n                  />\n                ) : null}\n\n                {step === 15 ? (\n                  <Disagreements\n                    grem={grem}\n                    font_size={font_size}\n                    line_height={line_height}\n                    grem={grem}\n                    analyze={step < 6 ? false : true}\n                    data={data}\n                    info={info}\n                    sort={sort}\n                    review_sort={reviews_sort}\n                    setAnalyze={setAnalyze}\n                    setSort={setSort}\n                    setReviewSort={setReviewSort}\n                    show_accuracy={reviews_accuracy}\n                    setAccuracy={setAccuracy}\n                    router={{ query: { id: review_id } }}\n                    compare={reviews_compare}\n                    setCompare={setCompare}\n                    nbsvm_data={nbsvm_data}\n                    hl_options={hl_options}\n                  />\n                ) : null}\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n\n        <div\n          style={{\n            position: 'fixed',\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0,\n            zIndex: 9999,\n            overflow: 'auto',\n            background: 'rgba(0,0,0,0.0625)',\n            cursor: step > 0 ? 's-resize' : 'pointer',\n          }}\n          ref={this.scrollRef}\n          onClick={() => {\n            if (step === 0) {\n              showInfo(false)\n            } else {\n              this.scrollNext()\n            }\n          }}\n        >\n          <div>\n            {step > 0 ? (\n              <div\n                style={{\n                  position: 'fixed',\n                  right: grem / 2,\n                  top: grem / 2,\n                  color: 'white',\n                  zIndex: 999,\n                }}\n              >\n                <button\n                  style={{ textDecoration: 'underline' }}\n                  onClick={() => {\n                    showInfo(false)\n                  }}\n                >\n                  Quit\n                </button>\n              </div>\n            ) : null}\n          </div>\n\n          {step > 0 ? (\n            <div>\n              <div style={{ position: 'fixed', left: 0, top: 0, right: 0 }}>\n                <div\n                  style={{\n                    background: '#222',\n                    color: 'white',\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                  }}\n                >\n                  <div\n                    style={{\n                      padding: grem / 2,\n                    }}\n                  >\n                    <b>Tour</b>\n                  </div>\n                  <div style={{ display: 'flex' }}>\n                    {wh !== null ? (\n                      <div\n                        style={{ paddingTop: grem / 2, paddingLeft: grem / 2 }}\n                      >\n                        {step} of 16\n                      </div>\n                    ) : null}\n                    <div style={{ padding: grem / 2, opacity: 0 }}>Quit</div>\n                  </div>\n                </div>\n                <Border />\n              </div>\n            </div>\n          ) : null}\n          <div\n            style={{\n              background: 'transparent',\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              right: 0,\n              paddingLeft: grem / 3,\n              paddingRight: grem / 3,\n              paddingBottom: '100vh',\n            }}\n          >\n            <Scene grem={grem} one_screen={true}>\n              <div\n                style={{\n                  marginTop: -grem / 2,\n                  marginLeft: -grem / 2,\n                  marginRight: -grem / 2,\n                  marginBottom: grem / 2,\n                  background: '#222',\n                  color: 'white',\n                }}\n              >\n                <div\n                  style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                  }}\n                >\n                  <div\n                    style={{\n                      paddingTop: grem / 4,\n                      paddingBottom: grem / 4,\n                      paddingLeft: grem / 2,\n                      paddingRight: grem / 2,\n                    }}\n                  >\n                    Info\n                  </div>\n                  <button\n                    style={{\n                      paddingTop: grem / 4,\n                      paddingBottom: grem / 4,\n                      paddingLeft: grem / 2,\n                      paddingRight: grem / 2,\n                      textDecoration: 'underline',\n                    }}\n                    onClick={() => {\n                      showInfo(false)\n                    }}\n                  >\n                    &times;\n                  </button>\n                </div>\n                <Border />\n              </div>\n              <div>\n                <p>\n                  Textflix is a sentiment analysis prototype by{' '}\n                  <a href=\"https://www.cloudera.com/products/fast-forward-labs-research.html\">\n                    Cloudera Fast Forward Labs\n                  </a>\n                  , built to accompany our report on transfer learning for\n                  natural language processing. It uses movie reviews to show how\n                  machine learning can unlock the data embedded in large amounts\n                  of unstructured text.\n                </p>\n                <p>\n                  Textflix features over 1,000 text reviews for 50 movies and TV\n                  shows. The{' '}\n                  <span style={{ whiteSpace: 'nowrap' }}>\n                    <span\n                      style={{\n                        width: grem * 0.5,\n                        height: grem * 0.5,\n                        border: 'solid 1px black',\n                        background: analyze ? 'black' : 'white',\n                        display: 'inline-block',\n                        marginLeft: grem * (1 / 8),\n                        marginRight: grem * (1 / 16),\n                      }}\n                    />{' '}\n                    Analyze\n                  </span>{' '}\n                  option uses a model pretrained with{' '}\n                  <a href=\"https://github.com/google-research/bert\">BERT</a> to\n                  classify each review as{' '}\n                  <span style={{ background: blue }}>positive</span> or{' '}\n                  <span style={{ background: red }}>negative</span>. Trained on\n                  only 500 labeled reviews, the model achieves 92% accuracy.\n                  Textflix lets you explore each classification at the sentence\n                  level and compare the model's performance to a baseline NB-SVM\n                  model.\n                </p>{' '}\n                <p>\n                  We recommend\n                  <button\n                    style={{ textDecoration: 'underline' }}\n                    onClick={this.scrollNext}\n                  >\n                    scrolling to take the interactive tour â†“\n                  </button>{' '}\n                  but you can also{' '}\n                  <button\n                    style={{ textDecoration: 'underline' }}\n                    onClick={() => {\n                      showInfo(false)\n                    }}\n                  >\n                    jump right in\n                  </button>\n                  .\n                </p>\n              </div>\n            </Scene>\n            <Scene grem={grem} spacer={space} wh={wh}>\n              <p>\n                1. The overview page features an eclectic mix of fifty movie and\n                TV shows. Without analysis, the only thing we can tell you about\n                their reviews is how many there are.\n              </p>\n              {next}\n            </Scene>\n            <Scene grem={grem} spacer={space} wh={wh}>\n              <p>\n                2. With sentiment analysis, we can show the user how many of the\n                reviews are positive or negative.\n              </p>\n              {next}\n            </Scene>\n            <Scene grem={grem} spacer={space} wh={wh}>\n              <p>\n                3. With that info uncovered you can sort by most positive\n                reviews, and find out that <i>Just Before Dawn</i>, a slasher\n                horror film from 1981, is the most liked movie.\n              </p>\n              {next}\n            </Scene>\n            <Scene grem={grem} spacer={space} wh={wh}>\n              <p>\n                4. Or sort by most negative and find out <i>The Box</i>, Richard\n                Kelly's disastrous follow-up to <i>Donnie Darko</i>, is the most\n                disliked.\n              </p>\n              {next}\n            </Scene>\n            <Scene grem={grem} spacer={space} wh={wh}>\n              <p>\n                5. Now let's look at an individual movie. Without sentiment\n                analysis you would have to read through the reviews one-by-one\n                to get a sense for how people feel about the movie{' '}\n                <i>Accepted</i>.\n              </p>\n              {next}\n            </Scene>\n            <Scene grem={grem} spacer={space} wh={wh}>\n              <p>\n                6. With analysis you can immediately see that the reviews are{' '}\n                generally (70%) positive.\n              </p>\n              {next}\n            </Scene>\n            <Scene grem={grem} spacer={space} wh={wh}>\n              <p>\n                7. For each review you can see both the model's classification\n                and certainty. We use an interpretability technique called LIME\n                to determine how each sentence is affecting the classification.\n                We underline the sentences that contribute most strongly to the\n                classification. This added interpretability helps us understand\n                how the model is making its decisions.\n              </p>\n              {next}\n            </Scene>\n            <Scene grem={grem} spacer={space} wh={wh}>\n              <p>\n                8. In addition to underlining important sentences within the\n                review, we use the highest scoring sentences as highlights.\n                Showing, at a glance, what people most liked and disliked about\n                the movie.\n              </p>\n              {next}\n            </Scene>\n            <Scene grem={grem} spacer={space} wh={wh}>\n              <p>\n                9. So far we've shown you how analysis can unlock the data\n                embedded within text. Now we're going to look at the options\n                that show model performance.\n              </p>\n              {next}\n            </Scene>\n            <Scene grem={grem} spacer={space} wh={wh}>\n              <p>\n                10. The <i>show accuracy</i> option exposes how the model's\n                classifications compare to the original rating entered by the\n                reviewer. Our model achieves 93% accuracy for the 1,021 reviews\n                in the dataset.\n              </p>\n              {next}\n            </Scene>\n            <Scene grem={grem} spacer={space} wh={wh}>\n              <p>\n                11. On the topic page, you can examine the model's accuracy on a\n                review by review basis.\n              </p>\n              {next}\n            </Scene>\n            <Scene grem={grem} spacer={space} wh={wh}>\n              <p>\n                12. You can sort the reviews by <i>inaccurate</i> to focus on\n                the ones it got wrong.\n              </p>\n              {next}\n            </Scene>\n            <Scene grem={grem} spacer={space} wh={wh}>\n              <p>\n                13. Finally, you can use the <i>model comparison</i> option to\n                see how our model compares to one trained without the benefit of\n                transfer learning. This mode introduces a split-screen, with the\n                baseline model on the left and our main model on the right.\n              </p>\n              {next}\n            </Scene>\n            <Scene grem={grem} spacer={space} wh={wh}>\n              <p>\n                14. You can sort the reviews by recent to get a view of each\n                review side-by-side. Often the underlined sentences can help you\n                understand disagreements between the two models.\n              </p>\n              {next}\n            </Scene>\n            <Scene grem={grem} spacer={space} wh={wh}>\n              <p>\n                15. If you want to get a more thorough look at the\n                disagreements, check out the <i>Disagreements</i> page, linked\n                to at the bottom of each page, to see a list of all the reviews\n                where the models disagreed. You'll notice that our model is the\n                winner of the majority of the disagreements.\n              </p>\n              {next}\n            </Scene>\n            <Scene grem={grem} spacer={space} wh={wh}>\n              <p>\n                Fin. That's the end of our tour. Now you're ready to explore\n                Textflix yourself.\n              </p>\n              <div style={{ marginTop: grem * 0 }}>\n                <button\n                  onClick={this.scrollNext}\n                  style={{ textDecoration: 'underline' }}\n                >\n                  End tour â†“\n                </button>\n              </div>\n            </Scene>\n            <Scene grem={grem} spacer={1} wh={wh} trans={true} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Tour\n"],"mappings":"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","sourceRoot":""}