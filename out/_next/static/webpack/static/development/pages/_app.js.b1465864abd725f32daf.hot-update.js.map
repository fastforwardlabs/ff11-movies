{"version":3,"file":"static/webpack/static/development/pages/_app.js.b1465864abd725f32daf.hot-update.js","sources":["webpack:///./pages/_app.js"],"sourcesContent":["import React from 'react'\nimport App, { Container } from 'next/app'\nimport Link from 'next/link'\n\nlet algnames = ['bert', 'nbsvm', 'nbsvm_words']\nlet algfiles = [\n  'bert_lime_grouped_pretty.json',\n  'nbsvm_lime_grouped_pretty.json',\n  'nbsvm_lime_grouped_pretty_word.json',\n]\n\nclass MyApp extends App {\n  static async getInitialProps({ Component, ctx }) {\n    let pageProps = {}\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx)\n    }\n\n    return { pageProps }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      analyze: false,\n      data: null,\n      data_select: 0,\n    }\n  }\n\n  componentDidMount() {\n    fetch('/static/data/' + algfiles[this.state.data_select])\n      .then(r => r.json())\n      .then(r => {\n        this.setState({ data: r })\n      })\n  }\n\n  render() {\n    let { analyze, data } = this.state\n    let { Component, pageProps } = this.props\n    let font_size = 16\n    let line_height = 1.5\n    let grem = font_size * line_height\n\n    return (\n      <div>\n        <style jsx global>{`\n          * {\n            box-sizing: border-box;\n            font-family: sans-serif;\n          }\n          html {\n          }\n          body {\n            margin: 0;\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',\n              'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',\n              'Helvetica Neue', sans-serif;\n            font-size: 16;\n            line-height: 1.5;\n            background: white;\n            -webkit-font-smoothing: antialiased;\n            -moz-osx-font-smoothing: grayscale;\n          }\n          code {\n            font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n              monospace;\n          }\n          a {\n            color: black;\n          }\n          a.no-underline {\n            text-decoration: none;\n          }\n          a.gray-hover:hover {\n            background: rgba(0, 0, 0, 0.1);\n          }\n        `}</style>\n        <div\n          style={{\n            padding: grem / 2,\n            borderBottom: 'solid 1px black',\n            fontWeight: 700,\n          }}\n        >\n          <Link href=\"/\">\n            <a>Movie and TV Review Message Board</a>\n          </Link>\n        </div>\n\n        <Container>\n          <Component\n            {...pageProps}\n            font_size={font_size}\n            line_height={line_height}\n            grem={grem}\n            analyze={analyze}\n            data={data}\n          />\n        </Container>\n\n        <div\n          style={{\n            padding: grem / 2,\n            background: analyze ? 'orchid' : 'white',\n            // color: 'white',\n            borderTop: 'solid 1px black',\n            fontFamily: 'IBM Plex Mono',\n            fontSize: 14,\n            lineHeight: 1.5,\n            position: 'fixed',\n            left: 0,\n            bottom: 0,\n            right: 0,\n            display: 'flex',\n            justifyContent: 'space-between',\n          }}\n        >\n          <div>Sentiment Analyzer</div>\n          <div>\n            <div>\n              {algnames.map((n, i) =>\n                this.state.data_select === i ? (\n                  <span>{n}</span>\n                ) : (\n                  <button>{n}</button>\n                )\n              )}\n            </div>\n            <div>\n              {analyze ? (\n                <button\n                  onClick={() => {\n                    this.setState({ analyze: false })\n                  }}\n                >\n                  Off\n                </button>\n              ) : (\n                <button\n                  onClick={() => {\n                    this.setState({ analyze: true })\n                  }}\n                >\n                  On\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default MyApp\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAKA;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;;;;;;AACA;AACA;;AADA;AACA;;AAEA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAOA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;;;;AA/IA;AACA;AAiJA;;;;A","sourceRoot":""}