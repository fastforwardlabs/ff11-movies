{"version":3,"file":"static/webpack/static/development/pages/topic.js.aec594b8195f150d9208.hot-update.js","sources":["webpack:///./pages/topic.js"],"sourcesContent":["import { withRouter } from 'next/router'\nimport * as chroma from 'chroma-js'\nimport * as _ from 'lodash'\nimport { nouns, adjectives } from '../data/corpora.js'\nimport getConfig from 'next-server/config'\nimport Bar from '../parts/Bar'\nimport {\n  scaleRed,\n  scaleBlue,\n  scaleTextRed,\n  scaleTextBlue,\n  colorExtend,\n} from '../parts/Static'\n\nlet { publicRuntimeConfig } = getConfig()\nlet linkPrefix = publicRuntimeConfig.linkPrefix\n\nlet class_labels = ['negative', 'positive']\nconst Page = withRouter(\n  ({\n    font_size,\n    line_height,\n    grem,\n    router,\n    analyze,\n    data,\n    info,\n    setAnalyze,\n    review_sort,\n    setReviewSort,\n  }) => {\n    let info_ids = info.map(o => o.og_id)\n    let topic_info = info[info_ids.indexOf(router.query.id)]\n\n    let reviews = data.filter(o => o.url === router.query.id)\n\n    let counts = reviews.reduce(\n      (counts, r) => {\n        let slice = counts.slice()\n        if (r.class_probabilities[1] > r.class_probabilities[0]) {\n          slice[1] += 1\n        } else {\n          slice[0] += 1\n        }\n        return slice\n      },\n      [0, 0]\n    )\n\n    let winner_count_index = 0\n    if (counts[1] > counts[0]) winner_count_index = 1\n    let winner_names = ['negative', 'positive']\n    let winner_name = winner_names[winner_count_index]\n\n    let rightwrong = reviews.reduce(\n      (counts, r) => {\n        let slice = counts.slice()\n        if (r.label === r.class) {\n          slice[1] += 1\n        } else {\n          slice[0] += 1\n        }\n        return slice\n      },\n      [0, 0]\n    )\n    let accuracy = rightwrong[1] / reviews.length\n\n    let certainty_array = reviews.map(r => {\n      if (r.logits[1] > r.logits[0]) {\n        return {\n          class: r.class,\n          certainty: r.class_probabilities[1],\n        }\n      } else {\n        return {\n          class: r.class,\n          certainty: r.class_probabilities[0],\n        }\n      }\n    })\n    let pos = _.sortBy(\n      certainty_array.filter(r => r.class === 'pos'),\n      'certainty'\n    ).reverse()\n    let neg = _.sortBy(\n      certainty_array.filter(r => r.class === 'neg'),\n      'certainty'\n    )\n    let combined = [...pos, ...neg]\n\n    let sorted = reviews.slice()\n    if (review_sort === 'date') {\n    } else if (review_sort === 'positive') {\n      sorted = _.sortBy(sorted, function(r) {\n        let sort_val\n        if (r.class === 'pos') sort_val = r.class_probabilities[1]\n        if (r.class === 'neg') sort_val = r.class_probabilities[0] - 1\n        return sort_val\n      })\n      sorted = sorted.reverse()\n    } else if (review_sort === 'negative') {\n      sorted = _.sortBy(sorted, function(r) {\n        let sort_val\n        if (r.class === 'pos') sort_val = r.class_probabilities[1] - 1\n        if (r.class === 'neg') sort_val = r.class_probabilities[0]\n        return sort_val\n      })\n      sorted = sorted.reverse()\n    }\n\n    let top_sentences = reviews.map(r => {\n      let max = Math.max(\n        Math.abs(_.min(r.lime_scores)),\n        Math.abs(_.max(r.lime_scores))\n      )\n\n      function scaleScore(value) {\n        if (value < 0) {\n          return scaleRed(Math.abs(value) / max)\n        } else {\n          return scaleBlue(Math.abs(value) / max)\n        }\n      }\n\n      let sentences = r.lime_tokens.map((t, i) => {\n        let score = r.lime_scores[i]\n        console.log(colorExtend(scaleScore(score), 1))\n        let scaled = Math.abs(r.lime_scores[i]) / max\n        return {\n          token: t,\n          score: score,\n          class: r.class,\n          scaled_score: scaled,\n          background: scaleScore(score),\n        }\n      })\n      let sorted = _.sortBy(sentences, 'score')\n      if (r.class === 'pos') sorted = sorted.reverse()\n      return sorted[0]\n    })\n\n    console.log(top_sentences)\n\n    let top_pos = top_sentences.filter(s => s.class === 'pos')\n    let top_neg = top_sentences.filter(s => s.class === 'neg')\n\n    return (\n      <div style={{ paddingBottom: grem * 2 }}>\n        <div\n          style={{\n            maxWidth: 840,\n            margin: `0 auto`,\n          }}\n        >\n          <div\n            style={{\n              overflow: 'hidden',\n              marginBottom: grem,\n            }}\n          >\n            <div\n              style={{\n                float: 'left',\n                position: 'relative',\n                marginRight: grem,\n              }}\n            >\n              <img\n                src={topic_info.Poster}\n                style={{\n                  filter: `grayscale(100%) contrast(10) brightness(2) opacity(85%)`,\n                  border: 'solid 1px black',\n                  width: 220,\n                  float: 'left',\n                }}\n              />\n              {analyze ? (\n                <div\n                  style={{\n                    position: 'absolute',\n                    left: 0,\n                    top: 0,\n                    right: 0,\n                    bottom: 0,\n                    mixBlendMode: 'multiply',\n                  }}\n                >\n                  {combined.map((c, i) => (\n                    <div\n                      style={{\n                        position: 'absolute',\n                        left: `${(1 / combined.length) * i * 100}%`,\n                        top: 0,\n                        bottom: 0,\n                        width: `${(1 / combined.length) * 100 + 0.05}%`,\n                        background:\n                          c.class === 'pos'\n                            ? scaleBlue(c.certainty)\n                            : scaleRed(c.certainty),\n                      }}\n                    />\n                  ))}\n                </div>\n              ) : null}\n            </div>\n\n            <div\n              style={{\n                fontSize: font_size * 2,\n                lineHeight: 1.25,\n                marginBottom: grem / 1,\n                fontWeight: 700,\n                paddingTop: grem / 4,\n              }}\n            >\n              {topic_info.Title}\n            </div>\n            <div>{topic_info.Plot}</div>\n          </div>\n\n          <div style={{ marginBottom: grem / 2 }}>Review highlights</div>\n          <div\n            style={{\n              marginBottom: grem,\n              borderBottom: `solid ${grem / 2}px ${scaleBlue(1)}`,\n              borderLeft: `solid ${grem / 2}px ${scaleBlue(1)}`,\n              borderRight: `solid ${grem / 2}px ${scaleBlue(1)}`,\n              marginLeft: -grem / 2,\n              marginRight: -grem / 2,\n            }}\n          >\n            <div\n              style={{\n                padding: `${grem / 4}px ${(grem / 2) * 0}px`,\n                background: scaleBlue(1),\n              }}\n            >\n              Positive\n            </div>\n\n            <div style={{ border: 'solid 1px black' }}>\n              <div\n                style={{\n                  width: '100%',\n                  overflowX: 'auto',\n                }}\n              >\n                <div\n                  style={{\n                    padding: grem / 2,\n                    display: 'flex',\n                  }}\n                >\n                  {top_pos.map(s => (\n                    <div\n                      style={{\n                        border: 'solid 1px black',\n                        padding: grem / 2,\n                        width: 300,\n                        minWidth: 300,\n                        height: 200,\n                        marginRight: grem,\n                      }}\n                    >\n                      <span\n                        style={{\n                          backgroundImage: `linear-gradient(${s.background}, ${\n                            s.background\n                          })`,\n                          backgroundSize: '4px 7px',\n                          backgroundRepeat: 'repeat-x',\n                          backgroundPosition: `0 0.85em`,\n                          paddingBottom: 2,\n                        }}\n                      >\n                        {s.token}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div\n            style={{\n              marginBottom: grem,\n              borderBottom: `solid ${grem / 2}px ${scaleBlue(1)}`,\n              borderLeft: `solid ${grem / 2}px ${scaleBlue(1)}`,\n              borderRight: `solid ${grem / 2}px ${scaleBlue(1)}`,\n              marginLeft: -grem / 2,\n              marginRight: -grem / 2,\n            }}\n          >\n            <div\n              style={{\n                padding: `${grem / 4}px ${(grem / 2) * 0}px`,\n                background: scaleBlue(1),\n              }}\n            >\n              Positive\n            </div>\n\n            <div style={{ border: 'solid 1px black' }}>\n              <div\n                style={{\n                  width: '100%',\n                  overflowX: 'auto',\n                }}\n              >\n                <div\n                  style={{\n                    padding: grem / 2,\n                    display: 'flex',\n                  }}\n                >\n                  {top_pos.map(s => (\n                    <div\n                      style={{\n                        border: 'solid 1px black',\n                        padding: grem / 2,\n                        width: 300,\n                        minWidth: 300,\n                        height: 200,\n                        marginRight: grem,\n                      }}\n                    >\n                      <span\n                        style={{\n                          backgroundImage: `linear-gradient(${s.background}, ${\n                            s.background\n                          })`,\n                          backgroundSize: '4px 7px',\n                          backgroundRepeat: 'repeat-x',\n                          backgroundPosition: `0 0.85em`,\n                          paddingBottom: 2,\n                        }}\n                      >\n                        {s.token}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n            }}\n          >\n            <div\n              style={{\n                padding: `${grem / 4}px ${0}px`,\n              }}\n            >\n              Reviews\n            </div>\n            <div\n              style={{\n                display: 'flex',\n                padding: `${grem / 4}px ${0}px`,\n              }}\n            >\n              <div\n                style={{\n                  padding: `${grem / 4}px ${grem / 4}px`,\n                  marginLeft: -grem / 4,\n                }}\n              >\n                Sort reviews by:\n              </div>\n              {[\n                ['date', 'date'],\n                ['positive', 'positive'],\n                ['negative', 'negative'],\n              ].map(p => (\n                <div>\n                  {p[1] === review_sort ? (\n                    <div\n                      style={{\n                        padding: `${grem / 4}px ${grem / 4}px`,\n                        background: '#222',\n                        color: 'white',\n                      }}\n                    >\n                      {p[0]}\n                    </div>\n                  ) : (\n                    <button\n                      onClick={() => setReviewSort(p[1])}\n                      style={{\n                        padding: `${grem / 4}px ${grem / 4}px`,\n                        textDecoration: 'underline',\n                      }}\n                    >\n                      {p[0]}\n                    </button>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div style={{}}>\n            <div\n              style={{\n                padding: grem / 2,\n                border: 'solid 1px black',\n                position: 'relative',\n                marginBottom: grem / 1,\n                display: 'none',\n              }}\n            >\n              {analyze ? (\n                <div\n                  style={{\n                    position: 'absolute',\n                    left: 0,\n                    top: 0,\n                    right: 0,\n                    bottom: 0,\n                    mixBlendMode: 'multiply',\n                  }}\n                >\n                  {combined.map((c, i) => (\n                    <div\n                      style={{\n                        position: 'absolute',\n                        left: `${(1 / combined.length) * i * 100}%`,\n                        top: 0,\n                        bottom: 0,\n                        width: `${(1 / combined.length) * 100 + 0.05}%`,\n                        background:\n                          c.class === 'pos'\n                            ? scaleBlue(c.certainty)\n                            : scaleRed(c.certainty),\n                      }}\n                    />\n                  ))}\n                </div>\n              ) : null}\n              {reviews.length} reviews\n              {analyze ? (\n                <span>\n                  {' '}\n                  &middot;{' '}\n                  {counts[1] > counts[0] ? (\n                    <span>\n                      {Math.round((counts[1] / combined.length) * 100)}%\n                      positive\n                    </span>\n                  ) : (\n                    <span>\n                      {Math.round((counts[0] / combined.length) * 100)}%\n                      negative\n                    </span>\n                  )}\n                </span>\n              ) : null}\n            </div>\n\n            <div>\n              {sorted.map((r, i) => {\n                let winner_name = r.class\n                let winner_index, scaleWinner, scaleLoser\n                if (r.class_probabilities[1] > r.class_probabilities[0]) {\n                  winner_index = 1\n                  scaleWinner = scaleBlue\n                  scaleLoser = scaleRed\n                } else {\n                  winner_index = 0\n                  scaleWinner = scaleRed\n                  scaleLoser = scaleBlue\n                }\n\n                let max = Math.max(\n                  Math.abs(_.min(r.lime_scores)),\n                  Math.abs(_.max(r.lime_scores))\n                )\n\n                function scaleScore(value) {\n                  if (value < 0) {\n                    return scaleRed(Math.abs(value) / max)\n                  } else {\n                    return scaleBlue(Math.abs(value) / max)\n                  }\n                }\n\n                return (\n                  <div\n                    style={{\n                      borderTop: `solid ${grem / 2}px ${scaleWinner(\n                        r.class_probabilities[winner_index]\n                      )}`,\n                      borderLeft: `solid ${grem / 2}px ${scaleWinner(\n                        r.class_probabilities[winner_index]\n                      )}`,\n                      borderRight: `solid ${grem / 2}px ${scaleWinner(\n                        r.class_probabilities[winner_index]\n                      )}`,\n                      marginLeft: -grem / 2,\n                      marginRight: -grem / 2,\n                      marginBottom: grem / 2,\n                    }}\n                  >\n                    <div\n                      style={{\n                        border: 'solid 1px black',\n                      }}\n                    >\n                      <div style={{}}>\n                        {analyze ? (\n                          <div\n                            style={{\n                              padding: `${grem / 4}px ${grem / 2}px`,\n                              // borderTop: `solid ${grem / 2}px ${scaleWinner(\n                              //   r.class_probabilities[winner_index]\n                              // )}`,\n                              background: scaleWinner(\n                                r.class_probabilities[winner_index]\n                              ),\n                              display: 'none',\n                            }}\n                          >\n                            <span>{class_labels[winner_index]} review</span>{' '}\n                            &middot;{' '}\n                            <span\n                              style={{\n                                lineHeight: 1.5,\n                              }}\n                            >\n                              {Math.round(\n                                r.class_probabilities[winner_index] * 100\n                              )}\n                              % certainty\n                            </span>\n                          </div>\n                        ) : null}\n                        <div\n                          style={{\n                            padding: grem / 2,\n                          }}\n                        >\n                          <div\n                            style={{\n                              lineHeight: 1.5,\n                              fontSize: font_size * 0.875,\n                              marginBottom: grem / 8,\n                              display: 'flex',\n                              justifyContent: 'space-between',\n                            }}\n                          >\n                            {_.sample(adjectives)\n                              .toLowerCase()\n                              .replace('-', '') +\n                              '-' +\n                              _.sample(nouns)\n                                .toLowerCase()\n                                .replace('-', '')}{' '}\n                            wrote &middot; {i * 2 + 3} days ago\n                          </div>\n\n                          {r.lime_tokens.map((t, i) => {\n                            let score = r.lime_scores[i]\n                            let background = scaleScore(score)\n                            return (\n                              <span>\n                                {' '}\n                                <span\n                                  style={{\n                                    backgroundImage: `linear-gradient(${background}, ${background})`,\n                                    backgroundSize: '4px 7px',\n                                    backgroundRepeat: 'repeat-x',\n                                    backgroundPosition: `0 0.85em`,\n                                    paddingBottom: 2,\n                                  }}\n                                >\n                                  {t}\n                                </span>\n                              </span>\n                            )\n                          })}\n                        </div>\n                      </div>\n                    </div>\n                    <div\n                      style={{\n                        background: scaleWinner(\n                          r.class_probabilities[winner_index]\n                        ),\n                        padding: `${grem / 4}px ${grem / 4}px`,\n                        fontSize: font_size * 0.875,\n                        lineHeight: 1.5,\n                      }}\n                    >\n                      <span>{class_labels[winner_index]} review</span> &middot;{' '}\n                      <span\n                        style={{\n                          lineHeight: 1.5,\n                        }}\n                      >\n                        {Math.round(r.class_probabilities[winner_index] * 100)}%\n                        certainty\n                      </span>\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n        </div>\n        <Bar\n          grem={grem}\n          setAnalyze={setAnalyze}\n          analyze={analyze}\n          combined={combined}\n        />\n      </div>\n    )\n  }\n)\n\nexport default Page\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AAAA;AAEA;AACA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAFA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAoBA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;A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","sourceRoot":""}