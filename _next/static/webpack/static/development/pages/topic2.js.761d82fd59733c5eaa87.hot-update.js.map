{"version":3,"file":"static/webpack/static/development/pages/topic2.js.761d82fd59733c5eaa87.hot-update.js","sources":["webpack:///./pages/topic2.js"],"sourcesContent":["import { withRouter } from 'next/router'\nimport Link from 'next/link'\nimport * as chroma from 'chroma-js'\nimport * as _ from 'lodash'\nimport { nouns, adjectives } from '../data/corpora.js'\nimport getConfig from 'next-server/config'\nimport Bar from '../parts/Bar'\nimport {\n  scaleRed,\n  scaleBlue,\n  scaleTextRed,\n  scaleTextBlue,\n  colorExtend,\n} from '../parts/Static'\n\nlet { publicRuntimeConfig } = getConfig()\nlet linkPrefix = publicRuntimeConfig.linkPrefix\n\nlet class_labels = ['negative', 'positive']\n\nclass Page extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      show_all_positive: false,\n      show_all_negative: false,\n    }\n  }\n\n  render() {\n    let {\n      font_size,\n      line_height,\n      grem,\n      router,\n      analyze,\n      data,\n      info,\n      setAnalyze,\n      review_sort,\n      setReviewSort,\n    } = this.props\n    let info_ids = info.map(o => o.og_id)\n    let topic_info = info[info_ids.indexOf(router.query.id)]\n\n    let reviews = data\n      .filter(o => o.url === router.query.id)\n      .map((r, i) => {\n        let new_r = Object.assign({}, r)\n        new_r.author =\n          _.sample(adjectives)\n            .toLowerCase()\n            .replace('-', '') +\n          '_' +\n          _.sample(nouns)\n            .toLowerCase()\n            .replace('-', '')\n        new_r.date = i * 2 + 3 + ' days ago'\n        return new_r\n      })\n\n    let counts = reviews.reduce(\n      (counts, r) => {\n        let slice = counts.slice()\n        if (r.class_probabilities[1] > r.class_probabilities[0]) {\n          slice[1] += 1\n        } else {\n          slice[0] += 1\n        }\n        return slice\n      },\n      [0, 0]\n    )\n\n    let certainty_array = reviews.map(r => {\n      if (r.logits[1] > r.logits[0]) {\n        return {\n          class: r.class,\n          label: r.label,\n          certainty: r.class_probabilities[1],\n        }\n      } else {\n        return {\n          class: r.class,\n          label: r.label,\n          certainty: r.class_probabilities[0],\n        }\n      }\n    })\n    let pos = _.sortBy(\n      certainty_array.filter(r => r.class === 'pos'),\n      'certainty'\n    ).reverse()\n    let neg = _.sortBy(\n      certainty_array.filter(r => r.class === 'neg'),\n      'certainty'\n    )\n    let combined = [...pos, ...neg]\n\n    let sorted = reviews.slice()\n    if (review_sort === 'date') {\n    } else if (review_sort === 'positive') {\n      sorted = _.sortBy(sorted, function(r) {\n        let sort_val\n        if (r.class === 'pos') sort_val = 1 - r.class_probabilities[1] - 1\n        if (r.class === 'neg') sort_val = r.class_probabilities[0] - 0\n        return sort_val\n      })\n    } else if (review_sort === 'negative') {\n      sorted = _.sortBy(sorted, function(r) {\n        let sort_val\n        if (r.class === 'pos') sort_val = r.class_probabilities[1] - 0\n        if (r.class === 'neg') sort_val = 1 - r.class_probabilities[0] - 1\n        return sort_val\n      })\n    } else if (review_sort === 'accurate') {\n      sorted = _.sortBy(sorted, [\n        function(r) {\n          return r.class === r.label ? 0 : 1\n        },\n        function(r) {\n          let sort_val\n          if (r.class === 'pos') sort_val = 1 - r.class_probabilities[1]\n          if (r.class === 'neg') sort_val = 1 - r.class_probabilities[0]\n          return sort_val\n        },\n      ])\n    } else if (review_sort === 'inaccurate') {\n      sorted = _.sortBy(sorted, [\n        function(r) {\n          return r.class === r.label ? 1 : 0\n        },\n        function(r) {\n          let sort_val\n          if (r.class === 'pos') sort_val = 1 - r.class_probabilities[1]\n          if (r.class === 'neg') sort_val = 1 - r.class_probabilities[0]\n          return sort_val\n        },\n      ])\n    }\n\n    let top_sentences = reviews.map(r => {\n      let max = Math.max(\n        Math.abs(_.min(r.lime_scores)),\n        Math.abs(_.max(r.lime_scores))\n      )\n\n      function scaleScore(value) {\n        if (value < 0) {\n          return scaleTextRed(Math.abs(value) / max)\n        } else {\n          return scaleTextBlue(Math.abs(value) / max)\n        }\n      }\n\n      let sentences = r.lime_tokens.map((t, i) => {\n        let score = r.lime_scores[i]\n        let scaled = Math.abs(r.lime_scores[i]) / max\n        return {\n          token: t,\n          score: score,\n          class: r.class,\n          scaled_score: scaled,\n          background: scaleScore(score),\n          author: r.author,\n          date: r.date,\n        }\n      })\n      let sorted = _.sortBy(sentences, 'score')\n      if (r.class === 'pos') sorted = sorted.reverse()\n      return sorted[0]\n    })\n\n    let top_pos = top_sentences.filter(s => s.class === 'pos')\n    let top_neg = top_sentences.filter(s => s.class === 'neg')\n\n    let show_limit = 4\n\n    let rightwrong = reviews.reduce(\n      (counts, r) => {\n        let slice = counts.slice()\n        if (r.label === r.class) {\n          slice[1] += 1\n        } else {\n          slice[0] += 1\n        }\n        return slice\n      },\n      [0, 0]\n    )\n    let accuracy = rightwrong[1] / reviews.length\n\n    return (\n      <div style={{ paddingBottom: grem * 4 }}>\n        <Bar\n          grem={grem}\n          setAnalyze={setAnalyze}\n          analyze={analyze}\n          combined={combined}\n          total={false}\n          setAlgo={this.props.setAlgo}\n          algnames={this.props.algnames}\n          data_select={this.props.data_select}\n          rightwrong={rightwrong}\n          accuracy={accuracy}\n        />\n\n        <div\n          style={{\n            maxWidth: 700,\n            margin: '0 auto',\n            padding: grem / 2,\n          }}\n        >\n          <div style={{ marginBottom: grem }}>\n            <div>{topic_info.Title}</div>\n            <div style={{ textIndent: grem }}>\n              {topic_info.Year} &middot; {topic_info.Runtime} &middot;{' '}\n              {topic_info.Rated}\n            </div>\n            <div style={{ textIndent: grem }}>{topic_info.Plot}</div>\n          </div>\n          <div style={{ marginBottom: grem }}>\n            <div\n              style={{ height: grem, position: 'relative', overflow: 'hidden' }}\n            >\n              {combined.map((c, i) => (\n                <div\n                  style={{\n                    position: 'absolute',\n                    left: `${(1 / combined.length) * i * 100}%`,\n                    top: 0,\n                    bottom: 0,\n                    width: `${(1 / combined.length) * 100 + 0.05}%`,\n                    background:\n                      c.class === 'pos'\n                        ? scaleBlue(c.certainty)\n                        : scaleRed(c.certainty),\n                  }}\n                />\n              ))}\n              <span style={{ position: 'relative' }}>\n                <span>\n                  {reviews.length} reviews &middot; {counts[1]} positive (\n                  {Math.floor((counts[1] / combined.length) * 1000) / 10}%)\n                </span>\n              </span>\n            </div>\n            <div style={{ position: 'relative', overflow: 'hidden' }}>\n              {combined.map((c, i) => (\n                <div\n                  style={{\n                    position: 'absolute',\n                    left: `${(1 / combined.length) * i * 100}%`,\n                    bottom: 0,\n                    height: grem,\n                    width: `${(1 / combined.length) * 100 + 0.05}%`,\n                    background:\n                      c.label !== c.class\n                        ? c.label === 'pos'\n                          ? scaleBlue(1)\n                          : scaleRed(1)\n                        : '#ddd',\n                  }}\n                />\n              ))}\n\n              <div style={{ position: 'relative' }}>\n                {rightwrong[0] > 0 ? (\n                  <span>\n                    {Math.floor((accuracy * 1000) / 10)}% accuracy (\n                    {rightwrong[0]} wrong)\n                  </span>\n                ) : (\n                  <span>{Math.floor((accuracy * 1000) / 10)}% accuracy</span>\n                )}\n              </div>\n            </div>\n          </div>\n          {[\n            [\n              'positive',\n              top_pos,\n              this.state.show_all_positive,\n              'show_all_positive',\n            ],\n            [\n              'negative',\n              top_neg,\n              this.state.show_all_negative,\n              'show_all_negative',\n            ],\n          ].map(a => (\n            <div style={{ marginBottom: grem }}>\n              <div>\n                {a[1].length} {a[0]} review highlights\n              </div>\n              <div style={{ textIndent: grem }}>\n                {a[1].slice(0, a[2] ? Infinity : show_limit).map((s, i) => (\n                  <span style={{}}>\n                    <span\n                      style={{\n                        backgroundImage: `linear-gradient(${s.background}, ${\n                          s.background\n                        })`,\n                        backgroundSize: '4px 7px',\n                        backgroundRepeat: 'repeat-x',\n                        backgroundPosition: `0 0.85em`,\n                        paddingBottom: 2,\n                      }}\n                    >\n                      {s.token}\n                    </span>{' '}\n                    by {s.author} {s.date}{' '}\n                    {a[1].length < show_limit && a[1].length - 1 === i ? (\n                      ''\n                    ) : (\n                      <span>&middot;</span>\n                    )}{' '}\n                  </span>\n                ))}{' '}\n                {a[1].length > show_limit ? (\n                  !a[2] ? (\n                    <button\n                      style={{ textDecoration: 'underline' }}\n                      onClick={() => this.setState({ [a[3]]: true })}\n                    >\n                      show all\n                    </button>\n                  ) : (\n                    <button\n                      style={{ textDecoration: 'underline' }}\n                      onClick={() => this.setState({ [a[3]]: false })}\n                    >\n                      show less\n                    </button>\n                  )\n                ) : null}\n              </div>\n            </div>\n          ))}\n          <div>\n            <div\n              style={{\n                display: 'flex',\n                paddingBottom: grem / 2 - 0.5,\n                borderBottom: 'solid 1px black',\n                marginBottom: grem / 2 - 0.5,\n                position: 'sticky',\n                top: 0,\n                paddingTop: grem / 2,\n                marginTop: -grem / 2,\n                background: 'white',\n                zIndex: 99,\n              }}\n            >\n              <div\n                style={{\n                  display: 'flex',\n                  paddingRight: grem / 4,\n                  marginLeft: -grem / 4,\n                }}\n              >\n                <div style={{ paddingLeft: grem / 4, paddingRight: grem / 4 }}>\n                  {reviews.length} reviews sorted by most:\n                </div>\n                {(analyze\n                  ? [\n                      ['recent', 'date'],\n                      ['positive', 'positive'],\n                      ['negative', 'negative'],\n                      ['accurate', 'accurate'],\n                      ['inaccurate', 'inaccurate'],\n                    ]\n                  : [['recent', 'date']]\n                ).map(a =>\n                  review_sort === a[1] ? (\n                    <div\n                      style={{\n                        paddingLeft: grem / 4,\n                        paddingRight: grem / 4,\n                        background: '#222',\n                        color: 'white',\n                      }}\n                    >\n                      {a[0]}\n                    </div>\n                  ) : (\n                    <button\n                      onClick={() => {\n                        setReviewSort(a[1])\n                      }}\n                      style={{\n                        paddingLeft: grem / 4,\n                        paddingRight: grem / 4,\n                        textDecoration: 'underline',\n                      }}\n                    >\n                      {a[0]}\n                    </button>\n                  )\n                )}\n              </div>\n            </div>\n            <div>\n              {sorted.map((r, i) => {\n                let winner_name = r.class\n                let winner_index, scaleWinner, scaleLoser\n                if (r.class_probabilities[1] > r.class_probabilities[0]) {\n                  winner_index = 1\n                  scaleWinner = scaleBlue\n                  scaleLoser = scaleRed\n                } else {\n                  winner_index = 0\n                  scaleWinner = scaleRed\n                  scaleLoser = scaleBlue\n                }\n\n                let max = Math.max(\n                  Math.abs(_.min(r.lime_scores)),\n                  Math.abs(_.max(r.lime_scores))\n                )\n\n                function scaleScore(value) {\n                  if (value < 0) {\n                    return scaleTextRed(Math.abs(value) / max)\n                  } else {\n                    return scaleTextBlue(Math.abs(value) / max)\n                  }\n                }\n\n                return (\n                  <div style={{ marginBottom: grem }}>\n                    <div style={{ marginBottom: (grem / 2) * 0 }}>\n                      <div>\n                        <div>\n                          <div style={{}}>\n                            {r.author} wrote &middot; {r.date}\n                          </div>\n                          <div style={{ textIndent: grem }}>\n                            {r.lime_tokens.map((t, i) => {\n                              let score = r.lime_scores[i]\n                              let background = scaleScore(score)\n                              return (\n                                <span>\n                                  {' '}\n                                  <span\n                                    style={{\n                                      backgroundImage: `linear-gradient(${background}, ${background})`,\n                                      backgroundSize: '4px 5px',\n                                      backgroundRepeat: 'repeat-x',\n                                      backgroundPosition: `0 0.85em`,\n                                      paddingBottom: 2,\n                                    }}\n                                  >\n                                    {t}\n                                  </span>{' '}\n                                </span>\n                              )\n                            })}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div style={{}}>\n                      <div\n                        style={{\n                          background: scaleWinner(\n                            r.class_probabilities[winner_index]\n                          ),\n                        }}\n                      >\n                        <span>{class_labels[winner_index]} review</span>{' '}\n                        &middot;{' '}\n                        <span style={{}}>\n                          {Math.floor(\n                            r.class_probabilities[winner_index] * 1000\n                          ) / 10}\n                          % certainty\n                        </span>\n                      </div>\n                      <div\n                        style={{\n                          background:\n                            r.label === r.class\n                              ? '#ddd'\n                              : r.label === 'pos'\n                              ? scaleBlue(1)\n                              : scaleRed(1),\n                        }}\n                      >\n                        {r.label === r.class ? 'accurate' : 'inaccurate'}{' '}\n                        &middot;{' '}\n                        {r.label === 'pos' ? 'positive' : 'negative'}\n                      </div>\n                    </div>\n                  </div>\n                )\n              })}\n            </div>\n            <div style={{ marginBottom: 0 }}>\n              <Link href=\"/\">\n                <a>Go to front</a>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(Page)\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AAAA;AAEA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAFA;AAMA;AACA;;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAQA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AAHA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA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","sourceRoot":""}