{"version":3,"file":"static/webpack/static/development/pages/_app.js.eeea81033c6289c87c3b.hot-update.js","sources":["webpack:///./parts/Tour.js"],"sourcesContent":["import React from 'react'\nimport App, { Container } from 'next/app'\nimport { nouns, adjectives } from '../data/corpora.js'\nimport { red, blue, Border } from '../parts/Static'\nimport Scene from '../parts/Scene'\nimport Topic2 from '../pages/Topic2'\nimport Index from '../pages/Index'\n\nlet choreography = [0, 1]\n\nclass Tour extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      scroll: 0,\n      step: 0,\n      offsets: null,\n      wh: null,\n    }\n    this.scrollRef = React.createRef()\n    this.overviewBlank = this.overviewBlank.bind(this)\n  }\n  componentDidMount() {\n    this.setState({ wh: window.innerHeight })\n\n    let scroller = this.scrollRef.current\n    let wh = this.state.wh || window.innerHeight\n    let offsets =\n      this.state.offsets ||\n      Array.from(scroller.querySelectorAll('.scene')).map(n => n.offsetTop)\n\n    this.setState({\n      offsets: offsets,\n    })\n\n    scroller.addEventListener('scroll', () => {\n      for (let i = 0; i < offsets.length; i++) {\n        let r = offsets.length - 1 - i\n        let thresh = offsets[r]\n        if (scroller.scrollTop > thresh - wh * (7 / 8)) {\n          this.setState({ step: r })\n          break\n        }\n      }\n    })\n  }\n\n  overviewBlank() {\n    this.props.router.push('/test', { shallow: true })\n  }\n\n  render() {\n    let {\n      font_size,\n      line_height,\n      data_select,\n      grem,\n      router,\n      analyze,\n      data,\n      info,\n      setAnalyze,\n      review_sort,\n      setReviewSort,\n      show_accuracy,\n      setAccuracy,\n      compare,\n      setCompare,\n      nbsvm_data,\n      sort,\n      setSort,\n    } = this.props\n    let { show_info, reviews_length, movies_length } = this.props\n    let { wh, step } = this.state\n\n    let index_sort = 'reviews'\n    if (step === 3) index_sort = 'positive'\n    if (step === 4) index_sort = 'negative'\n\n    let hl_options = {}\n    if (step > 2) hl_options.highlight_first_in_grid = true\n\n    return (\n      <div\n        style={{\n          position: 'fixed',\n          left: 0,\n          top: 0,\n          right: 0,\n          bottom: 0,\n          zIndex: 9999,\n        }}\n      >\n        {step > 0 ? (\n          <div\n            style={{\n              position: 'fixed',\n              left: 0,\n              top: grem * 2,\n              right: 0,\n              bottom: 0,\n              background: 'white',\n              overflow: 'hidden',\n              border: 'solid 6px red',\n              height: 'calc(100vh - 3rem)',\n            }}\n          >\n            {data !== null && nbsvm_data !== null ? (\n              <div>\n                {step > 0 && step < 5 ? (\n                  <Index\n                    grem={grem}\n                    font_size={font_size}\n                    line_height={line_height}\n                    grem={grem}\n                    analyze={step === 1 ? false : true}\n                    data={data}\n                    info={info}\n                    sort={index_sort}\n                    review_sort={review_sort}\n                    setAnalyze={setAnalyze}\n                    setSort={setSort}\n                    setReviewSort={setReviewSort}\n                    show_accuracy={show_accuracy}\n                    setAccuracy={setAccuracy}\n                    router={{ query: { id: 'tt0762073' } }}\n                    compare={compare}\n                    setCompare={setCompare}\n                    nbsvm_data={nbsvm_data}\n                    hl_options={hl_options}\n                  />\n                ) : null}\n\n                {step > 4 ? (\n                  <Topic2\n                    grem={grem}\n                    font_size={font_size}\n                    line_height={line_height}\n                    grem={grem}\n                    analyze={step < 6 ? false : true}\n                    data={data}\n                    info={info}\n                    sort={sort}\n                    review_sort={review_sort}\n                    setAnalyze={setAnalyze}\n                    setSort={setSort}\n                    setReviewSort={setReviewSort}\n                    show_accuracy={show_accuracy}\n                    setAccuracy={setAccuracy}\n                    router={{ query: { id: 'tt0762073' } }}\n                    compare={compare}\n                    setCompare={setCompare}\n                    nbsvm_data={nbsvm_data}\n                    hl_options={hl_options}\n                  />\n                ) : null}\n              </div>\n            ) : null}\n          </div>\n        ) : null}\n\n        <div\n          style={{\n            position: 'fixed',\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0,\n            zIndex: 9999,\n            overflow: 'auto',\n          }}\n          ref={this.scrollRef}\n        >\n          <div style={{ position: 'fixed', left: 0, top: 0, right: 0 }}>\n            <div\n              style={{\n                background: 'white',\n                display: 'flex',\n                justifyContent: 'space-between',\n              }}\n            >\n              <div\n                style={{\n                  padding: grem / 2,\n                }}\n              >\n                Tour\n              </div>\n              <div style={{ display: 'flex' }}>\n                {wh !== null ? (\n                  <div style={{ paddingTop: grem / 2, paddingLeft: grem / 2 }}>\n                    {step}\n                  </div>\n                ) : null}\n                <button\n                  style={{\n                    padding: grem / 2,\n                    textDecoration: 'underline',\n                  }}\n                >\n                  Pause\n                </button>\n              </div>\n            </div>\n            <Border />\n          </div>\n          <div\n            style={{\n              background: 'transparent',\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              right: 0,\n              paddingBottom: '100vh',\n            }}\n          >\n            <Scene grem={grem} one_screen={true}>\n              <div\n                style={{\n                  paddingTop: grem / 4,\n                  paddingBottom: grem / 4,\n                  paddingLeft: grem / 2,\n                  paddingRight: grem / 2,\n                  marginTop: -grem / 2,\n                  marginLeft: -grem / 2,\n                  marginRight: -grem / 2,\n                  marginBottom: grem / 2,\n                  background: '#222',\n                  color: '#fff',\n                }}\n              >\n                Info\n              </div>\n              <div>\n                <p>\n                  Textflicks is a sentiment analysis prototype by Cloudera Fast\n                  Forward Labs, built to accompany our report on transfer\n                  learning for natural language generation. It uses movie\n                  reviews to show how NLP techniques can unlock the data\n                  embedded in large amounts of unstructured text.\n                </p>\n                <p>\n                  Textflicks features over 1,000 text reviews for 50 movies and\n                  TV shows. The \"Analyze\" function uses a neural network to\n                  classify each review as positive or negative. The \"accuracy\"\n                  option lets you check the model's predictions against each\n                  review's original label, and the \"model comparison\" option\n                  lets you compare this model to one trained without transfer\n                  learning. Sentence highlights in individual reviews show which\n                  sentences are driving the positive or negative classification.\n                </p>\n                <p>\n                  You can{' '}\n                  <button style={{ textDecoration: 'underline' }}>\n                    jump in now\n                  </button>{' '}\n                  or{' '}\n                  <button style={{ textDecoration: 'underline' }}>\n                    scroll to take the tour â†“\n                  </button>\n                  .\n                </p>\n              </div>\n            </Scene>\n            <Scene grem={grem} spacer={1} wh={wh}>\n              <p>The overview page shows 50 movie and TV shows.</p>\n            </Scene>\n            <Scene grem={grem} spacer={1} wh={wh}>\n              <p>Analyze shows you the sentiment.</p>\n            </Scene>\n            <Scene grem={grem} spacer={1} wh={wh}>\n              <p>Then you can see the most liked movie..</p>\n            </Scene>\n            <Scene grem={grem} spacer={1} wh={wh}>\n              <p>Or the most disliked.</p>\n            </Scene>\n            <Scene grem={grem} spacer={1} wh={wh}>\n              <p>What about a review page?</p>\n            </Scene>\n            <Scene grem={grem} spacer={1} wh={wh}>\n              <p>Analyzed!</p>\n            </Scene>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Tour\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AATA;AAUA;AACA;;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAeA;AAAA;AAAA;AAAA;AAfA;AAAA;AAAA;AAyBA;AACA;AACA;AAHA;AAeA;AAAA;AAAA;AAAA;AAfgpRA;AACA;AAsRA;;;;A","sourceRoot":""}